
lora-2-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08006064  08006064  00007064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006944  08006944  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800694c  0800694c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800694c  0800694c  0000794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006950  08006950  00007950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006954  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          00000720  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000790  20000790  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f404  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025bc  00000000  00000000  000174a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00019a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096a  00000000  00000000  0001a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002160e  00000000  00000000  0001affa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107d6  00000000  00000000  0003c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c37bb  00000000  00000000  0004cdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110599  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aac  00000000  00000000  001105dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00114088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800604c 	.word	0x0800604c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800604c 	.word	0x0800604c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000286:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800028a:	2201      	movs	r2, #1
 800028c:	2178      	movs	r1, #120	@ 0x78
 800028e:	484c      	ldr	r0, [pc, #304]	@ (80003c0 <SH1106_Init+0x140>)
 8000290:	f001 fca8 	bl	8001be4 <HAL_I2C_IsDeviceReady>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 800029a:	2300      	movs	r3, #0
 800029c:	e08b      	b.n	80003b6 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800029e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80002a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80002a4:	e002      	b.n	80002ac <SH1106_Init+0x2c>
		p--;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d1f9      	bne.n	80002a6 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80002b2:	22ae      	movs	r2, #174	@ 0xae
 80002b4:	2100      	movs	r1, #0
 80002b6:	2078      	movs	r0, #120	@ 0x78
 80002b8:	f000 fa54 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 80002bc:	22b0      	movs	r2, #176	@ 0xb0
 80002be:	2100      	movs	r1, #0
 80002c0:	2078      	movs	r0, #120	@ 0x78
 80002c2:	f000 fa4f 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 80002c6:	2281      	movs	r2, #129	@ 0x81
 80002c8:	2100      	movs	r1, #0
 80002ca:	2078      	movs	r0, #120	@ 0x78
 80002cc:	f000 fa4a 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 80002d0:	22ff      	movs	r2, #255	@ 0xff
 80002d2:	2100      	movs	r1, #0
 80002d4:	2078      	movs	r0, #120	@ 0x78
 80002d6:	f000 fa45 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80002da:	22a1      	movs	r2, #161	@ 0xa1
 80002dc:	2100      	movs	r1, #0
 80002de:	2078      	movs	r0, #120	@ 0x78
 80002e0:	f000 fa40 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 80002e4:	22a6      	movs	r2, #166	@ 0xa6
 80002e6:	2100      	movs	r1, #0
 80002e8:	2078      	movs	r0, #120	@ 0x78
 80002ea:	f000 fa3b 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80002ee:	22a8      	movs	r2, #168	@ 0xa8
 80002f0:	2100      	movs	r1, #0
 80002f2:	2078      	movs	r0, #120	@ 0x78
 80002f4:	f000 fa36 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 80002f8:	223f      	movs	r2, #63	@ 0x3f
 80002fa:	2100      	movs	r1, #0
 80002fc:	2078      	movs	r0, #120	@ 0x78
 80002fe:	f000 fa31 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 8000302:	22ad      	movs	r2, #173	@ 0xad
 8000304:	2100      	movs	r1, #0
 8000306:	2078      	movs	r0, #120	@ 0x78
 8000308:	f000 fa2c 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 800030c:	228b      	movs	r2, #139	@ 0x8b
 800030e:	2100      	movs	r1, #0
 8000310:	2078      	movs	r0, #120	@ 0x78
 8000312:	f000 fa27 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000316:	2232      	movs	r2, #50	@ 0x32
 8000318:	2100      	movs	r1, #0
 800031a:	2078      	movs	r0, #120	@ 0x78
 800031c:	f000 fa22 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000320:	22c8      	movs	r2, #200	@ 0xc8
 8000322:	2100      	movs	r1, #0
 8000324:	2078      	movs	r0, #120	@ 0x78
 8000326:	f000 fa1d 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 800032a:	22d3      	movs	r2, #211	@ 0xd3
 800032c:	2100      	movs	r1, #0
 800032e:	2078      	movs	r0, #120	@ 0x78
 8000330:	f000 fa18 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000334:	2200      	movs	r2, #0
 8000336:	2100      	movs	r1, #0
 8000338:	2078      	movs	r0, #120	@ 0x78
 800033a:	f000 fa13 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800033e:	22d5      	movs	r2, #213	@ 0xd5
 8000340:	2100      	movs	r1, #0
 8000342:	2078      	movs	r0, #120	@ 0x78
 8000344:	f000 fa0e 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	2100      	movs	r1, #0
 800034c:	2078      	movs	r0, #120	@ 0x78
 800034e:	f000 fa09 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 8000352:	22d9      	movs	r2, #217	@ 0xd9
 8000354:	2100      	movs	r1, #0
 8000356:	2078      	movs	r0, #120	@ 0x78
 8000358:	f000 fa04 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 800035c:	221f      	movs	r2, #31
 800035e:	2100      	movs	r1, #0
 8000360:	2078      	movs	r0, #120	@ 0x78
 8000362:	f000 f9ff 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000366:	22da      	movs	r2, #218	@ 0xda
 8000368:	2100      	movs	r1, #0
 800036a:	2078      	movs	r0, #120	@ 0x78
 800036c:	f000 f9fa 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 8000370:	2212      	movs	r2, #18
 8000372:	2100      	movs	r1, #0
 8000374:	2078      	movs	r0, #120	@ 0x78
 8000376:	f000 f9f5 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 800037a:	22db      	movs	r2, #219	@ 0xdb
 800037c:	2100      	movs	r1, #0
 800037e:	2078      	movs	r0, #120	@ 0x78
 8000380:	f000 f9f0 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 8000384:	2240      	movs	r2, #64	@ 0x40
 8000386:	2100      	movs	r1, #0
 8000388:	2078      	movs	r0, #120	@ 0x78
 800038a:	f000 f9eb 	bl	8000764 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 800038e:	22af      	movs	r2, #175	@ 0xaf
 8000390:	2100      	movs	r1, #0
 8000392:	2078      	movs	r0, #120	@ 0x78
 8000394:	f000 f9e6 	bl	8000764 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 8000398:	2000      	movs	r0, #0
 800039a:	f000 f843 	bl	8000424 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 800039e:	f000 f813 	bl	80003c8 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <SH1106_Init+0x144>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SH1106_Init+0x144>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80003ae:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <SH1106_Init+0x144>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80003b4:	2301      	movs	r3, #1
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200004d8 	.word	0x200004d8
 80003c4:	2000048c 	.word	0x2000048c

080003c8 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	71fb      	strb	r3, [r7, #7]
 80003d2:	e01d      	b.n	8000410 <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	3b50      	subs	r3, #80	@ 0x50
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	2078      	movs	r0, #120	@ 0x78
 80003e0:	f000 f9c0 	bl	8000764 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	2078      	movs	r0, #120	@ 0x78
 80003ea:	f000 f9bb 	bl	8000764 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 80003ee:	2210      	movs	r2, #16
 80003f0:	2100      	movs	r1, #0
 80003f2:	2078      	movs	r0, #120	@ 0x78
 80003f4:	f000 f9b6 	bl	8000764 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	01db      	lsls	r3, r3, #7
 80003fc:	4a08      	ldr	r2, [pc, #32]	@ (8000420 <SH1106_UpdateScreen+0x58>)
 80003fe:	441a      	add	r2, r3
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	2140      	movs	r1, #64	@ 0x40
 8000404:	2078      	movs	r0, #120	@ 0x78
 8000406:	f000 f947 	bl	8000698 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3301      	adds	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b07      	cmp	r3, #7
 8000414:	d9de      	bls.n	80003d4 <SH1106_UpdateScreen+0xc>
	}
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000008c 	.word	0x2000008c

08000424 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d101      	bne.n	8000438 <SH1106_Fill+0x14>
 8000434:	2300      	movs	r3, #0
 8000436:	e000      	b.n	800043a <SH1106_Fill+0x16>
 8000438:	23ff      	movs	r3, #255	@ 0xff
 800043a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800043e:	4619      	mov	r1, r3
 8000440:	4803      	ldr	r0, [pc, #12]	@ (8000450 <SH1106_Fill+0x2c>)
 8000442:	f004 fecb 	bl	80051dc <memset>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000008c 	.word	0x2000008c

08000454 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	80fb      	strh	r3, [r7, #6]
 800045e:	460b      	mov	r3, r1
 8000460:	80bb      	strh	r3, [r7, #4]
 8000462:	4613      	mov	r3, r2
 8000464:	70fb      	strb	r3, [r7, #3]
	if (
 8000466:	88fb      	ldrh	r3, [r7, #6]
 8000468:	2b7f      	cmp	r3, #127	@ 0x7f
 800046a:	d848      	bhi.n	80004fe <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 800046c:	88bb      	ldrh	r3, [r7, #4]
 800046e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000470:	d845      	bhi.n	80004fe <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 8000472:	4b26      	ldr	r3, [pc, #152]	@ (800050c <SH1106_DrawPixel+0xb8>)
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d006      	beq.n	8000488 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf0c      	ite	eq
 8000480:	2301      	moveq	r3, #1
 8000482:	2300      	movne	r3, #0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d11a      	bne.n	80004c4 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 800048e:	88fa      	ldrh	r2, [r7, #6]
 8000490:	88bb      	ldrh	r3, [r7, #4]
 8000492:	08db      	lsrs	r3, r3, #3
 8000494:	b298      	uxth	r0, r3
 8000496:	4603      	mov	r3, r0
 8000498:	01db      	lsls	r3, r3, #7
 800049a:	4413      	add	r3, r2
 800049c:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <SH1106_DrawPixel+0xbc>)
 800049e:	5cd3      	ldrb	r3, [r2, r3]
 80004a0:	b25a      	sxtb	r2, r3
 80004a2:	88bb      	ldrh	r3, [r7, #4]
 80004a4:	f003 0307 	and.w	r3, r3, #7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f303 	lsl.w	r3, r1, r3
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b259      	sxtb	r1, r3
 80004b4:	88fa      	ldrh	r2, [r7, #6]
 80004b6:	4603      	mov	r3, r0
 80004b8:	01db      	lsls	r3, r3, #7
 80004ba:	4413      	add	r3, r2
 80004bc:	b2c9      	uxtb	r1, r1
 80004be:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <SH1106_DrawPixel+0xbc>)
 80004c0:	54d1      	strb	r1, [r2, r3]
 80004c2:	e01d      	b.n	8000500 <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80004c4:	88fa      	ldrh	r2, [r7, #6]
 80004c6:	88bb      	ldrh	r3, [r7, #4]
 80004c8:	08db      	lsrs	r3, r3, #3
 80004ca:	b298      	uxth	r0, r3
 80004cc:	4603      	mov	r3, r0
 80004ce:	01db      	lsls	r3, r3, #7
 80004d0:	4413      	add	r3, r2
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <SH1106_DrawPixel+0xbc>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	2101      	movs	r1, #1
 80004e0:	fa01 f303 	lsl.w	r3, r1, r3
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	4013      	ands	r3, r2
 80004ec:	b259      	sxtb	r1, r3
 80004ee:	88fa      	ldrh	r2, [r7, #6]
 80004f0:	4603      	mov	r3, r0
 80004f2:	01db      	lsls	r3, r3, #7
 80004f4:	4413      	add	r3, r2
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <SH1106_DrawPixel+0xbc>)
 80004fa:	54d1      	strb	r1, [r2, r3]
 80004fc:	e000      	b.n	8000500 <SH1106_DrawPixel+0xac>
		return;
 80004fe:	bf00      	nop
	}
}
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000048c 	.word	0x2000048c
 8000510:	2000008c 	.word	0x2000008c

08000514 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <SH1106_GotoXY+0x28>)
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 800052a:	4a04      	ldr	r2, [pc, #16]	@ (800053c <SH1106_GotoXY+0x28>)
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	8053      	strh	r3, [r2, #2]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	2000048c 	.word	0x2000048c

08000540 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	6039      	str	r1, [r7, #0]
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000550:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <SH1106_Putc+0xf8>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
	if (
 800055c:	2b7f      	cmp	r3, #127	@ 0x7f
 800055e:	dc07      	bgt.n	8000570 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000560:	4b35      	ldr	r3, [pc, #212]	@ (8000638 <SH1106_Putc+0xf8>)
 8000562:	885b      	ldrh	r3, [r3, #2]
 8000564:	461a      	mov	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800056c:	2b3f      	cmp	r3, #63	@ 0x3f
 800056e:	dd01      	ble.n	8000574 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000570:	2300      	movs	r3, #0
 8000572:	e05d      	b.n	8000630 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	e04b      	b.n	8000612 <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	3b20      	subs	r3, #32
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	7849      	ldrb	r1, [r1, #1]
 8000586:	fb01 f303 	mul.w	r3, r1, r3
 800058a:	4619      	mov	r1, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	440b      	add	r3, r1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	e030      	b.n	8000600 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d010      	beq.n	80005d0 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SH1106_Putc+0xf8>)
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4413      	add	r3, r2
 80005b8:	b298      	uxth	r0, r3
 80005ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <SH1106_Putc+0xf8>)
 80005bc:	885a      	ldrh	r2, [r3, #2]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	79ba      	ldrb	r2, [r7, #6]
 80005c8:	4619      	mov	r1, r3
 80005ca:	f7ff ff43 	bl	8000454 <SH1106_DrawPixel>
 80005ce:	e014      	b.n	80005fa <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <SH1106_Putc+0xf8>)
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b298      	uxth	r0, r3
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <SH1106_Putc+0xf8>)
 80005de:	885a      	ldrh	r2, [r3, #2]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4413      	add	r3, r2
 80005e6:	b299      	uxth	r1, r3
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	f7ff ff2d 	bl	8000454 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	3301      	adds	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4293      	cmp	r3, r2
 800060a:	d3c8      	bcc.n	800059e <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	461a      	mov	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	4293      	cmp	r3, r2
 800061c:	d3ad      	bcc.n	800057a <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <SH1106_Putc+0xf8>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	4413      	add	r3, r2
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <SH1106_Putc+0xf8>)
 800062c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800062e:	79fb      	ldrb	r3, [r7, #7]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000048c 	.word	0x2000048c

0800063c <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4613      	mov	r3, r2
 8000648:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800064a:	e012      	b.n	8000672 <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff73 	bl	8000540 <SH1106_Putc>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d002      	beq.n	800066c <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	e008      	b.n	800067e <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1e8      	bne.n	800064c <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	781b      	ldrb	r3, [r3, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff feca 	bl	8000424 <SH1106_Fill>
    SH1106_UpdateScreen();
 8000690:	f7ff fe9a 	bl	80003c8 <SH1106_UpdateScreen>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b0c7      	sub	sp, #284	@ 0x11c
 800069c:	af02      	add	r7, sp, #8
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80006a6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80006aa:	600a      	str	r2, [r1, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80006b6:	4622      	mov	r2, r4
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006be:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80006c2:	4602      	mov	r2, r0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006ce:	460a      	mov	r2, r1
 80006d0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80006d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006de:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80006ec:	e015      	b.n	800071a <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80006ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80006f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006f6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	441a      	add	r2, r3
 80006fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000702:	3301      	adds	r3, #1
 8000704:	7811      	ldrb	r1, [r2, #0]
 8000706:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800070a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800070e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000710:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000714:	3301      	adds	r3, #1
 8000716:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800071a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800071e:	b29b      	uxth	r3, r3
 8000720:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000724:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d8df      	bhi.n	80006ee <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 800072e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000732:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b299      	uxth	r1, r3
 800073a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	b29b      	uxth	r3, r3
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	200a      	movs	r0, #10
 800074e:	9000      	str	r0, [sp, #0]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <SH1106_I2C_WriteMulti+0xc8>)
 8000752:	f001 f92f 	bl	80019b4 <HAL_I2C_Master_Transmit>
}
 8000756:	bf00      	nop
 8000758:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800075c:	46bd      	mov	sp, r7
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	200004d8 	.word	0x200004d8

08000764 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	460b      	mov	r3, r1
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	4613      	mov	r3, r2
 8000774:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800077a:	797b      	ldrb	r3, [r7, #5]
 800077c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	b299      	uxth	r1, r3
 8000782:	f107 020c 	add.w	r2, r7, #12
 8000786:	230a      	movs	r3, #10
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SH1106_I2C_Write+0x38>)
 800078e:	f001 f911 	bl	80019b4 <HAL_I2C_Master_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200004d8 	.word	0x200004d8

080007a0 <_write>:
/* USER CODE BEGIN 0 */
/**
  * Simple retarget of printf to huart2 for debug logs.
  */
int _write(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  if (file == 1 || file == 2) // stdout or stderr
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d002      	beq.n	80007b8 <_write+0x18>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d110      	bne.n	80007da <_write+0x3a>
  {
    HAL_StatusTypeDef status;
    status = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <_write+0x50>)
 80007c4:	f003 fa4c 	bl	8003c60 <HAL_UART_Transmit>
 80007c8:	4603      	mov	r3, r0
 80007ca:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? len : EIO;
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <_write+0x36>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	e008      	b.n	80007e8 <_write+0x48>
 80007d6:	2305      	movs	r3, #5
 80007d8:	e006      	b.n	80007e8 <_write+0x48>
  }
  errno = EBADF;
 80007da:	f004 fd4d 	bl	8005278 <__errno>
 80007de:	4603      	mov	r3, r0
 80007e0:	2209      	movs	r2, #9
 80007e2:	601a      	str	r2, [r3, #0]
  return -1;
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200005b4 	.word	0x200005b4

080007f4 <ReceiveLoRaPacket>:
  * @brief  Receives one "packet" of data from the LoRa module:
  *         [AddrHi][AddrLo][Channel][Payload...][RSSI].
  *         Returns 1 if a packet was successfully read, 0 if no data was received.
  */
int ReceiveLoRaPacket(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	@ 0x2c
 80007f8:	af02      	add	r7, sp, #8
  // 1) Read 3 bytes for address + channel, each with e.g. 1000ms timeout
  if (HAL_UART_Receive(&huart1, &rxTemp, 1, 1000) != HAL_OK) return 0;
 80007fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fe:	2201      	movs	r2, #1
 8000800:	4961      	ldr	r1, [pc, #388]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 8000802:	4862      	ldr	r0, [pc, #392]	@ (800098c <ReceiveLoRaPacket+0x198>)
 8000804:	f003 fab5 	bl	8003d72 <HAL_UART_Receive>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <ReceiveLoRaPacket+0x1e>
 800080e:	2300      	movs	r3, #0
 8000810:	e0b5      	b.n	800097e <ReceiveLoRaPacket+0x18a>
  uint8_t addrHi = rxTemp;
 8000812:	4b5d      	ldr	r3, [pc, #372]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	777b      	strb	r3, [r7, #29]

  if (HAL_UART_Receive(&huart1, &rxTemp, 1, 100) != HAL_OK) return 0;
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	495a      	ldr	r1, [pc, #360]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 800081e:	485b      	ldr	r0, [pc, #364]	@ (800098c <ReceiveLoRaPacket+0x198>)
 8000820:	f003 faa7 	bl	8003d72 <HAL_UART_Receive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <ReceiveLoRaPacket+0x3a>
 800082a:	2300      	movs	r3, #0
 800082c:	e0a7      	b.n	800097e <ReceiveLoRaPacket+0x18a>
  uint8_t addrLo = rxTemp;
 800082e:	4b56      	ldr	r3, [pc, #344]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	773b      	strb	r3, [r7, #28]

  if (HAL_UART_Receive(&huart1, &rxTemp, 1, 100) != HAL_OK) return 0;
 8000834:	2364      	movs	r3, #100	@ 0x64
 8000836:	2201      	movs	r2, #1
 8000838:	4953      	ldr	r1, [pc, #332]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 800083a:	4854      	ldr	r0, [pc, #336]	@ (800098c <ReceiveLoRaPacket+0x198>)
 800083c:	f003 fa99 	bl	8003d72 <HAL_UART_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <ReceiveLoRaPacket+0x56>
 8000846:	2300      	movs	r3, #0
 8000848:	e099      	b.n	800097e <ReceiveLoRaPacket+0x18a>
  uint8_t channel = rxTemp;
 800084a:	4b4f      	ldr	r3, [pc, #316]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	76fb      	strb	r3, [r7, #27]
  // 2) Now read payload bytes until we time out. The last byte is the RSSI.
  //    We'll store all in rxBuffer. We'll keep reading until a short gap (e.g. 50ms).
  //    The typical pattern is: the LoRa module will quickly push all payload plus 1 RSSI byte.
  //    We'll assume the final byte we read is the RSSI.

  uint16_t payloadLen = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	83fb      	strh	r3, [r7, #30]
  while (1)
  {
    // Attempt to read 1 more byte with short timeout
    if (HAL_UART_Receive(&huart1, &rxTemp, 1, 30) == HAL_OK)
 8000854:	231e      	movs	r3, #30
 8000856:	2201      	movs	r2, #1
 8000858:	494b      	ldr	r1, [pc, #300]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 800085a:	484c      	ldr	r0, [pc, #304]	@ (800098c <ReceiveLoRaPacket+0x198>)
 800085c:	f003 fa89 	bl	8003d72 <HAL_UART_Receive>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10b      	bne.n	800087e <ReceiveLoRaPacket+0x8a>
    {
      // We read a new byte
      if (payloadLen < MAX_PAYLOAD_LEN)
 8000866:	8bfb      	ldrh	r3, [r7, #30]
 8000868:	2b3f      	cmp	r3, #63	@ 0x3f
 800086a:	d8f3      	bhi.n	8000854 <ReceiveLoRaPacket+0x60>
      {
        rxBuffer[payloadLen++] = rxTemp;
 800086c:	8bfb      	ldrh	r3, [r7, #30]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	83fa      	strh	r2, [r7, #30]
 8000872:	461a      	mov	r2, r3
 8000874:	4b44      	ldr	r3, [pc, #272]	@ (8000988 <ReceiveLoRaPacket+0x194>)
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <ReceiveLoRaPacket+0x19c>)
 800087a:	5499      	strb	r1, [r3, r2]
    if (HAL_UART_Receive(&huart1, &rxTemp, 1, 30) == HAL_OK)
 800087c:	e7ea      	b.n	8000854 <ReceiveLoRaPacket+0x60>
      }
    }
    else
    {
      // Timed out => no more data in this packet
      break;
 800087e:	bf00      	nop
    }
  }

  // If we got no payload bytes, that means we only read the 3 header bytes.
  if (payloadLen == 0)
 8000880:	8bfb      	ldrh	r3, [r7, #30]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d107      	bne.n	8000896 <ReceiveLoRaPacket+0xa2>
  {
    // Possibly just an empty message?
    // We'll still show something, but there's no RSSI or payload.
    printf("Got address=0x%02X%02X, ch=%d, but no payload.\r\n", addrHi, addrLo, channel);
 8000886:	7f79      	ldrb	r1, [r7, #29]
 8000888:	7f3a      	ldrb	r2, [r7, #28]
 800088a:	7efb      	ldrb	r3, [r7, #27]
 800088c:	4841      	ldr	r0, [pc, #260]	@ (8000994 <ReceiveLoRaPacket+0x1a0>)
 800088e:	f004 fb3b 	bl	8004f08 <iprintf>
    return 1;
 8000892:	2301      	movs	r3, #1
 8000894:	e073      	b.n	800097e <ReceiveLoRaPacket+0x18a>
  }

  // The last byte in our buffer is the auto-appended RSSI:
  uint8_t rssi_raw = rxBuffer[payloadLen - 1];
 8000896:	8bfb      	ldrh	r3, [r7, #30]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <ReceiveLoRaPacket+0x19c>)
 800089c:	5cd3      	ldrb	r3, [r2, r3]
 800089e:	76bb      	strb	r3, [r7, #26]
  payloadLen--; // Everything before that is the actual payload text
 80008a0:	8bfb      	ldrh	r3, [r7, #30]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	83fb      	strh	r3, [r7, #30]

  // Print debug
  printf("Received from 0x%02X%02X (ch=%d). Payload len=%d, RSSI(raw)=0x%02X\r\n",
 80008a6:	7f79      	ldrb	r1, [r7, #29]
 80008a8:	7f38      	ldrb	r0, [r7, #28]
 80008aa:	7efc      	ldrb	r4, [r7, #27]
 80008ac:	8bfb      	ldrh	r3, [r7, #30]
 80008ae:	7eba      	ldrb	r2, [r7, #26]
 80008b0:	9201      	str	r2, [sp, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4623      	mov	r3, r4
 80008b6:	4602      	mov	r2, r0
 80008b8:	4837      	ldr	r0, [pc, #220]	@ (8000998 <ReceiveLoRaPacket+0x1a4>)
 80008ba:	f004 fb25 	bl	8004f08 <iprintf>
         addrHi, addrLo, channel, payloadLen, rssi_raw);

  // Convert RSSI raw to dBm if needed (example formula, adjust for your module).
  int rssi_dBm = -120 + (rssi_raw * 0.5f);
 80008be:	7ebb      	ldrb	r3, [r7, #26]
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80008cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800099c <ReceiveLoRaPacket+0x1a8>
 80008d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008dc:	ee17 3a90 	vmov	r3, s15
 80008e0:	617b      	str	r3, [r7, #20]

  // Now let's make a null-terminated payload string to show
  // But watch for bounds:
  if (payloadLen > MAX_PAYLOAD_LEN - 1)
 80008e2:	8bfb      	ldrh	r3, [r7, #30]
 80008e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80008e6:	d901      	bls.n	80008ec <ReceiveLoRaPacket+0xf8>
    payloadLen = MAX_PAYLOAD_LEN - 1;
 80008e8:	233f      	movs	r3, #63	@ 0x3f
 80008ea:	83fb      	strh	r3, [r7, #30]
  rxBuffer[payloadLen] = '\0'; // null-terminate
 80008ec:	8bfb      	ldrh	r3, [r7, #30]
 80008ee:	4a28      	ldr	r2, [pc, #160]	@ (8000990 <ReceiveLoRaPacket+0x19c>)
 80008f0:	2100      	movs	r1, #0
 80008f2:	54d1      	strb	r1, [r2, r3]

  // Example debug
  printf("Payload: %s\r\n", (char*)rxBuffer);
 80008f4:	4926      	ldr	r1, [pc, #152]	@ (8000990 <ReceiveLoRaPacket+0x19c>)
 80008f6:	482a      	ldr	r0, [pc, #168]	@ (80009a0 <ReceiveLoRaPacket+0x1ac>)
 80008f8:	f004 fb06 	bl	8004f08 <iprintf>
  printf("RSSI (dBm): %d\r\n", rssi_dBm);
 80008fc:	6979      	ldr	r1, [r7, #20]
 80008fe:	4829      	ldr	r0, [pc, #164]	@ (80009a4 <ReceiveLoRaPacket+0x1b0>)
 8000900:	f004 fb02 	bl	8004f08 <iprintf>

  // Update OLED
  SH1106_Clear();
 8000904:	f7ff febf 	bl	8000686 <SH1106_Clear>
  SH1106_GotoXY(0, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fe02 	bl	8000514 <SH1106_GotoXY>
  SH1106_Puts("LoRa Receiver", &Font_7x10, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	4925      	ldr	r1, [pc, #148]	@ (80009a8 <ReceiveLoRaPacket+0x1b4>)
 8000914:	4825      	ldr	r0, [pc, #148]	@ (80009ac <ReceiveLoRaPacket+0x1b8>)
 8000916:	f7ff fe91 	bl	800063c <SH1106_Puts>

  // Show the payload
  SH1106_GotoXY(0, 15);
 800091a:	210f      	movs	r1, #15
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fdf9 	bl	8000514 <SH1106_GotoXY>
  SH1106_Puts("Msg:", &Font_7x10, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	4920      	ldr	r1, [pc, #128]	@ (80009a8 <ReceiveLoRaPacket+0x1b4>)
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <ReceiveLoRaPacket+0x1bc>)
 8000928:	f7ff fe88 	bl	800063c <SH1106_Puts>
  SH1106_GotoXY(35, 15);
 800092c:	210f      	movs	r1, #15
 800092e:	2023      	movs	r0, #35	@ 0x23
 8000930:	f7ff fdf0 	bl	8000514 <SH1106_GotoXY>
  SH1106_Puts((char*)rxBuffer, &Font_7x10, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	491c      	ldr	r1, [pc, #112]	@ (80009a8 <ReceiveLoRaPacket+0x1b4>)
 8000938:	4815      	ldr	r0, [pc, #84]	@ (8000990 <ReceiveLoRaPacket+0x19c>)
 800093a:	f7ff fe7f 	bl	800063c <SH1106_Puts>

  // Show the RSSI
  char rssiString[20];
  sprintf(rssiString, "RSSI: %d dBm", rssi_dBm);
 800093e:	463b      	mov	r3, r7
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	491c      	ldr	r1, [pc, #112]	@ (80009b4 <ReceiveLoRaPacket+0x1c0>)
 8000944:	4618      	mov	r0, r3
 8000946:	f004 fb4f 	bl	8004fe8 <siprintf>
  SH1106_GotoXY(0, 30);
 800094a:	211e      	movs	r1, #30
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fde1 	bl	8000514 <SH1106_GotoXY>
  SH1106_Puts(rssiString, &Font_7x10, 1);
 8000952:	463b      	mov	r3, r7
 8000954:	2201      	movs	r2, #1
 8000956:	4914      	ldr	r1, [pc, #80]	@ (80009a8 <ReceiveLoRaPacket+0x1b4>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe6f 	bl	800063c <SH1106_Puts>

  SH1106_UpdateScreen();
 800095e:	f7ff fd33 	bl	80003c8 <SH1106_UpdateScreen>

  // Blink LED to indicate a packet was received
  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000962:	2120      	movs	r1, #32
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 ff6e 	bl	8001848 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	@ 0x64
 800096e:	f000 fc17 	bl	80011a0 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000972:	2120      	movs	r1, #32
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f000 ff66 	bl	8001848 <HAL_GPIO_TogglePin>

  return 1;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	@ 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	20000492 	.word	0x20000492
 800098c:	2000052c 	.word	0x2000052c
 8000990:	20000494 	.word	0x20000494
 8000994:	08006064 	.word	0x08006064
 8000998:	08006098 	.word	0x08006098
 800099c:	42f00000 	.word	0x42f00000
 80009a0:	080060e0 	.word	0x080060e0
 80009a4:	080060f0 	.word	0x080060f0
 80009a8:	20000000 	.word	0x20000000
 80009ac:	08006104 	.word	0x08006104
 80009b0:	08006114 	.word	0x08006114
 80009b4:	0800611c 	.word	0x0800611c

080009b8 <main>:
/* USER CODE END 0 */

int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80009bc:	f000 fb8a 	bl	80010d4 <HAL_Init>
  SystemClock_Config();
 80009c0:	f000 f82a 	bl	8000a18 <SystemClock_Config>
  MX_GPIO_Init();
 80009c4:	f000 f92a 	bl	8000c1c <MX_GPIO_Init>
  MX_I2C2_Init();
 80009c8:	f000 f888 	bl	8000adc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80009cc:	f000 f8c6 	bl	8000b5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009d0:	f000 f8f4 	bl	8000bbc <MX_USART2_UART_Init>

  // Init OLED
  SH1106_Init();
 80009d4:	f7ff fc54 	bl	8000280 <SH1106_Init>
  SH1106_Clear();
 80009d8:	f7ff fe55 	bl	8000686 <SH1106_Clear>
  SH1106_GotoXY(10, 10);
 80009dc:	210a      	movs	r1, #10
 80009de:	200a      	movs	r0, #10
 80009e0:	f7ff fd98 	bl	8000514 <SH1106_GotoXY>
  SH1106_Puts("LoRa RX Start", &Font_7x10, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	4909      	ldr	r1, [pc, #36]	@ (8000a0c <main+0x54>)
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <main+0x58>)
 80009ea:	f7ff fe27 	bl	800063c <SH1106_Puts>
  SH1106_UpdateScreen();
 80009ee:	f7ff fceb 	bl	80003c8 <SH1106_UpdateScreen>

  printf("LoRa Receiver started. Waiting for packets...\r\n");
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <main+0x5c>)
 80009f4:	f004 faf0 	bl	8004fd8 <puts>

  // Turn on a LED to show we are in RX mode
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2108      	movs	r1, #8
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 ff0a 	bl	8001818 <HAL_GPIO_WritePin>

  while (1)
  {
    // Try to receive a packet
    ReceiveLoRaPacket();
 8000a04:	f7ff fef6 	bl	80007f4 <ReceiveLoRaPacket>
 8000a08:	e7fc      	b.n	8000a04 <main+0x4c>
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	0800612c 	.word	0x0800612c
 8000a14:	0800613c 	.word	0x0800613c

08000a18 <SystemClock_Config>:
  }
}

/* Peripheral/Clock/Pin init code below -- adapt as needed */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0a6      	sub	sp, #152	@ 0x98
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct  = {0};
 8000a1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a22:	2228      	movs	r2, #40	@ 0x28
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 fbd8 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2258      	movs	r2, #88	@ 0x58
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 fbca 	bl	80051dc <memset>

  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState           = RCC_HSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue= RCC_HSICALIBRATION_DEFAULT;
 8000a50:	2310      	movs	r3, #16
 8000a52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState       = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource      = RCC_PLLSOURCE_HSI;
 8000a5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL         = RCC_PLL_MUL9;
 8000a64:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV         = RCC_PREDIV_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fc52 	bl	8002320 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a82:	f000 f921 	bl	8000cc8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType           = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider       = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider      = RCC_HCLK_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider      = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 fc60 	bl	8003368 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aae:	f000 f90b 	bl	8000cc8 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection= RCC_PERIPHCLK_USART1
 8000ab2:	2343      	movs	r3, #67	@ 0x43
 8000ab4:	607b      	str	r3, [r7, #4]
                                     |RCC_PERIPHCLK_USART2
                                     |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection= RCC_USART1CLKSOURCE_PCLK2;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection= RCC_USART2CLKSOURCE_PCLK1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c2ClockSelection  = RCC_I2C2CLKSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fe61 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ad0:	f000 f8fa 	bl	8000cc8 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3798      	adds	r7, #152	@ 0x98
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_I2C2_Init>:

/* Example for I2C2 used by SH1106 */
static void MX_I2C2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  hi2c2.Instance              = I2C2;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <MX_I2C2_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing           = 0x0010020A;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <MX_I2C2_Init+0x7c>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1      = 0;
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2      = 0;
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b16:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b18:	f000 feb0 	bl	800187c <HAL_I2C_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b22:	f000 f8d1 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b2a:	f001 fb61 	bl	80021f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b34:	f000 f8c8 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_I2C2_Init+0x74>)
 8000b3c:	f001 fba3 	bl	8002286 <HAL_I2CEx_ConfigDigitalFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 f8bf 	bl	8000cc8 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200004d8 	.word	0x200004d8
 8000b54:	40005800 	.word	0x40005800
 8000b58:	0010020a 	.word	0x0010020a

08000b5c <MX_USART1_UART_Init>:

/* Example: UART1 used for LoRa data */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  huart1.Instance                    = USART1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	@ (8000bb8 <MX_USART1_UART_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate              = 9600;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength            = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits              = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity                = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode                  = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl             = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling          = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling        = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit= UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USART1_UART_Init+0x58>)
 8000ba0:	f003 f810 	bl	8003bc4 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 f88d 	bl	8000cc8 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000052c 	.word	0x2000052c
 8000bb8:	40013800 	.word	0x40013800

08000bbc <MX_USART2_UART_Init>:

/* Example: UART2 for debug (printf) */
static void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  huart2.Instance                    = USART2;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <MX_USART2_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate              = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength            = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits              = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity                = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode                  = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl             = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling          = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling        = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit= UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_USART2_UART_Init+0x58>)
 8000c00:	f002 ffe0 	bl	8003bc4 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 f85d 	bl	8000cc8 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200005b4 	.word	0x200005b4
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
  /* Clock enable for whichever ports needed. */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /* Example: LED pins */
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2128      	movs	r1, #40	@ 0x28
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f000 fdbd 	bl	8001818 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin   = Blue_LED_Pin|LD2_Pin;
 8000c9e:	2328      	movs	r3, #40	@ 0x28
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f000 fc24 	bl	8001504 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  __disable_irq();
  while(1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a18      	ldr	r2, [pc, #96]	@ (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d129      	bne.n	8000d92 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d76:	f000 fbc5 	bl	8001504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005800 	.word	0x40005800
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a40      	ldr	r2, [pc, #256]	@ (8000ec4 <HAL_UART_MspInit+0x120>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d128      	bne.n	8000e18 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a39      	ldr	r2, [pc, #228]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000de4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000df6:	2330      	movs	r3, #48	@ 0x30
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e06:	2307      	movs	r3, #7
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482e      	ldr	r0, [pc, #184]	@ (8000ecc <HAL_UART_MspInit+0x128>)
 8000e12:	f000 fb77 	bl	8001504 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e16:	e051      	b.n	8000ebc <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d14c      	bne.n	8000ebc <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e22:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f000 fb3c 	bl	8001504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <HAL_UART_MspInit+0x130>)
 8000ea8:	f000 fb2c 	bl	8001504 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2026      	movs	r0, #38	@ 0x26
 8000eb2:	f000 fa74 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb6:	2026      	movs	r0, #38	@ 0x26
 8000eb8:	f000 fa8d 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3730      	adds	r7, #48	@ 0x30
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f000 f917 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f002 ffe1 	bl	8003f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200005b4 	.word	0x200005b4

08000f4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e00a      	b.n	8000f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5e:	f3af 8000 	nop.w
 8000f62:	4601      	mov	r1, r0
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf0      	blt.n	8000f5e <_read+0x12>
  }

  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f004 f92a 	bl	8005278 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20010000 	.word	0x20010000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000063c 	.word	0x2000063c
 8001058:	20000790 	.word	0x20000790

0800105c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 f8e9 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fc81 	bl	80009b8 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010c4:	08006954 	.word	0x08006954
  ldr r2, =_sbss
 80010c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010cc:	20000790 	.word	0x20000790

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f94f 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fdf0 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f967 	bl	80013f2 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800113c:	f000 f92f 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000008 	.word	0x20000008
 8001158:	20000010 	.word	0x20000010
 800115c:	2000000c 	.word	0x2000000c

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000010 	.word	0x20000010
 8001184:	20000640 	.word	0x20000640

08001188 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;  
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000640 	.word	0x20000640

080011a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000010 	.word	0x20000010

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e02e      	b.n	800147a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001422:	2b02      	cmp	r3, #2
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e020      	b.n	800147a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020e 	bic.w	r2, r2, #14
 8001446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001498:	2b02      	cmp	r3, #2
 800149a:	d005      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e027      	b.n	80014f8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 020e 	bic.w	r2, r2, #14
 80014b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
    }
  }
  return status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	e160      	b.n	80017d6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8152 	beq.w	80017d0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d005      	beq.n	8001544 <HAL_GPIO_Init+0x40>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 0201 	and.w	r2, r3, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d017      	beq.n	80015e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d123      	bne.n	8001636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0203 	and.w	r2, r3, #3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80ac 	beq.w	80017d0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001678:	4b5e      	ldr	r3, [pc, #376]	@ (80017f4 <HAL_GPIO_Init+0x2f0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a5d      	ldr	r2, [pc, #372]	@ (80017f4 <HAL_GPIO_Init+0x2f0>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001690:	4a59      	ldr	r2, [pc, #356]	@ (80017f8 <HAL_GPIO_Init+0x2f4>)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016ba:	d025      	beq.n	8001708 <HAL_GPIO_Init+0x204>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <HAL_GPIO_Init+0x2f8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d01f      	beq.n	8001704 <HAL_GPIO_Init+0x200>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <HAL_GPIO_Init+0x2fc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d019      	beq.n	8001700 <HAL_GPIO_Init+0x1fc>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <HAL_GPIO_Init+0x300>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d013      	beq.n	80016fc <HAL_GPIO_Init+0x1f8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001808 <HAL_GPIO_Init+0x304>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00d      	beq.n	80016f8 <HAL_GPIO_Init+0x1f4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a4b      	ldr	r2, [pc, #300]	@ (800180c <HAL_GPIO_Init+0x308>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_Init+0x1f0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_GPIO_Init+0x1ec>
 80016ec:	2306      	movs	r3, #6
 80016ee:	e00c      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016f0:	2307      	movs	r3, #7
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016f4:	2305      	movs	r3, #5
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_GPIO_Init+0x2f4>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_GPIO_Init+0x310>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800174c:	4a31      	ldr	r2, [pc, #196]	@ (8001814 <HAL_GPIO_Init+0x310>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <HAL_GPIO_Init+0x310>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001776:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <HAL_GPIO_Init+0x310>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177c:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <HAL_GPIO_Init+0x310>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <HAL_GPIO_Init+0x310>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_GPIO_Init+0x310>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <HAL_GPIO_Init+0x310>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae97 	bne.w	8001514 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	48001400 	.word	0x48001400
 8001810:	48001800 	.word	0x48001800
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001834:	e002      	b.n	800183c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43d9      	mvns	r1, r3
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	400b      	ands	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e08d      	b.n	80019aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fa3a 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	@ 0x24
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e006      	b.n	8001904 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d108      	bne.n	800191e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e007      	b.n	800192e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800193c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69d9      	ldr	r1, [r3, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1a      	ldr	r2, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	817b      	strh	r3, [r7, #10]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	f040 80fd 	bne.w	8001bd0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_I2C_Master_Transmit+0x30>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0f6      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ec:	f7ff fbcc 	bl	8001188 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2319      	movs	r3, #25
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa00 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0e1      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2221      	movs	r2, #33	@ 0x21
 8001a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2210      	movs	r2, #16
 8001a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	893a      	ldrh	r2, [r7, #8]
 8001a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2bff      	cmp	r3, #255	@ 0xff
 8001a3e:	d906      	bls.n	8001a4e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	22ff      	movs	r2, #255	@ 0xff
 8001a44:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e007      	b.n	8001a5e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d024      	beq.n	8001ab0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	8979      	ldrh	r1, [r7, #10]
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bdc <HAL_I2C_Master_Transmit+0x228>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 fb6f 	bl	800218c <I2C_TransferConfig>
 8001aae:	e066      	b.n	8001b7e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	4b48      	ldr	r3, [pc, #288]	@ (8001bdc <HAL_I2C_Master_Transmit+0x228>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fb64 	bl	800218c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ac4:	e05b      	b.n	8001b7e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f9f3 	bl	8001eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07b      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d034      	beq.n	8001b7e <HAL_I2C_Master_Transmit+0x1ca>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d130      	bne.n	8001b7e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f96c 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e04d      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2bff      	cmp	r3, #255	@ 0xff
 8001b3e:	d90e      	bls.n	8001b5e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	22ff      	movs	r2, #255	@ 0xff
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	8979      	ldrh	r1, [r7, #10]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fb18 	bl	800218c <I2C_TransferConfig>
 8001b5c:	e00f      	b.n	8001b7e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	8979      	ldrh	r1, [r7, #10]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fb07 	bl	800218c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d19e      	bne.n	8001ac6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f9d9 	bl	8001f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e01a      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_I2C_Master_Transmit+0x22c>)
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	80002000 	.word	0x80002000
 8001be0:	fe00e800 	.word	0xfe00e800

08001be4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	f040 80d6 	bne.w	8001db2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
 8001c18:	e0cc      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_IsDeviceReady+0x44>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0c5      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2224      	movs	r2, #36	@ 0x24
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_I2C_IsDeviceReady+0x72>
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c54:	e006      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x80>
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fa8d 	bl	8001188 <HAL_GetTick>
 8001c6e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c9c:	e034      	b.n	8001d08 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ca4:	d01a      	beq.n	8001cdc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff fa6f 	bl	8001188 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <HAL_I2C_IsDeviceReady+0xd8>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e06b      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	bf0c      	ite	eq
 8001cea:	2301      	moveq	r3, #1
 8001cec:	2300      	movne	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_I2C_IsDeviceReady+0x130>
 8001d0e:	7fbb      	ldrb	r3, [r7, #30]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0c4      	beq.n	8001c9e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d01a      	beq.n	8001d58 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f869 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e03b      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2220      	movs	r2, #32
 8001d42:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e02d      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2120      	movs	r1, #32
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f84e 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e020      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2210      	movs	r2, #16
 8001d78:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f63f af56 	bhi.w	8001c3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d103      	bne.n	8001dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d007      	beq.n	8001df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	619a      	str	r2, [r3, #24]
  }
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e14:	e03b      	b.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8d6 	bl	8001fcc <I2C_IsErrorOccurred>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e30:	d02d      	beq.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7ff f9a9 	bl	8001188 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d122      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	4013      	ands	r3, r2
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d113      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4013      	ands	r3, r2
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d0b4      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec2:	e033      	b.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f87f 	bl	8001fcc <I2C_IsErrorOccurred>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e031      	b.n	8001f3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ede:	d025      	beq.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee0:	f7ff f952 	bl	8001188 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d302      	bcc.n	8001ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d11a      	bne.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d013      	beq.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e007      	b.n	8001f3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d1c4      	bne.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f50:	e02f      	b.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f838 	bl	8001fcc <I2C_IsErrorOccurred>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e02d      	b.n	8001fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7ff f90f 	bl	8001188 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11a      	bne.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d013      	beq.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f043 0220 	orr.w	r2, r3, #32
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d1c8      	bne.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d068      	beq.n	80020ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002000:	e049      	b.n	8002096 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002008:	d045      	beq.n	8002096 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f8bd 	bl	8001188 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_IsErrorOccurred+0x54>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d13a      	bne.n	8002096 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002032:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800203e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002042:	d121      	bne.n	8002088 <I2C_IsErrorOccurred+0xbc>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800204a:	d01d      	beq.n	8002088 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b20      	cmp	r3, #32
 8002050:	d01a      	beq.n	8002088 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002060:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002062:	f7ff f891 	bl	8001188 <HAL_GetTick>
 8002066:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002068:	e00e      	b.n	8002088 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800206a:	f7ff f88d 	bl	8001188 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b19      	cmp	r3, #25
 8002076:	d907      	bls.n	8002088 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002086:	e006      	b.n	8002096 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b20      	cmp	r3, #32
 8002094:	d1e9      	bne.n	800206a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d003      	beq.n	80020ac <I2C_IsErrorOccurred+0xe0>
 80020a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0aa      	beq.n	8002002 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2220      	movs	r2, #32
 80020ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800210e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01c      	beq.n	800217a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff fe3b 	bl	8001dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <I2C_IsErrorOccurred+0x1bc>)
 8002152:	400b      	ands	r3, r1
 8002154:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	431a      	orrs	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800217a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800217e:	4618      	mov	r0, r3
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	fe00e800 	.word	0xfe00e800

0800218c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	4613      	mov	r3, r2
 800219c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <I2C_TransferConfig+0x60>)
 80021cc:	430b      	orrs	r3, r1
 80021ce:	43db      	mvns	r3, r3
 80021d0:	ea02 0103 	and.w	r1, r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	03ff63ff 	.word	0x03ff63ff

080021f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	d138      	bne.n	8002278 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002210:	2302      	movs	r3, #2
 8002212:	e032      	b.n	800227a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002242:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	d139      	bne.n	8002310 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e033      	b.n	8002312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2224      	movs	r2, #36	@ 0x24
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002326:	af00      	add	r7, sp, #0
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002330:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002336:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	f001 b80a 	b.w	800335a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8161 	beq.w	800261e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800235c:	4bae      	ldr	r3, [pc, #696]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4bab      	ldr	r3, [pc, #684]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d157      	bne.n	8002424 <HAL_RCC_OscConfig+0x104>
 8002374:	4ba8      	ldr	r3, [pc, #672]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d150      	bne.n	8002424 <HAL_RCC_OscConfig+0x104>
 8002382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002386:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002396:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023a2:	d802      	bhi.n	80023aa <HAL_RCC_OscConfig+0x8a>
 80023a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0xb6>
 80023aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80023be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80023c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023d2:	4b91      	ldr	r3, [pc, #580]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023da:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80023de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80023e2:	fa92 f2a2 	rbit	r2, r2
 80023e6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80023ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023ee:	fab2 f282 	clz	r2, r2
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f042 0220 	orr.w	r2, r2, #32
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f002 021f 	and.w	r2, r2, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f202 	lsl.w	r2, r1, r2
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8108 	beq.w	800261c <HAL_RCC_OscConfig+0x2fc>
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 80ff 	bne.w	800261c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f000 bf9b 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002428:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x124>
 8002436:	4b78      	ldr	r3, [pc, #480]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e036      	b.n	80024b2 <HAL_RCC_OscConfig+0x192>
 8002444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002448:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x14e>
 8002454:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6f      	ldr	r2, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b6d      	ldr	r3, [pc, #436]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6c      	ldr	r2, [pc, #432]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e021      	b.n	80024b2 <HAL_RCC_OscConfig+0x192>
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x17a>
 8002480:	4b65      	ldr	r3, [pc, #404]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a64      	ldr	r2, [pc, #400]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002486:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b62      	ldr	r3, [pc, #392]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a61      	ldr	r2, [pc, #388]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x192>
 800249a:	4b5f      	ldr	r3, [pc, #380]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5e      	ldr	r2, [pc, #376]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d054      	beq.n	800256c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fe61 	bl	8001188 <HAL_GetTick>
 80024c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fe5c 	bl	8001188 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	@ 0x64
 80024da:	d902      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	f000 bf3c 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 80024e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80024f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b3f      	cmp	r3, #63	@ 0x3f
 8002502:	d802      	bhi.n	800250a <HAL_RCC_OscConfig+0x1ea>
 8002504:	4b44      	ldr	r3, [pc, #272]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x216>
 800250a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800250e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800251e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002522:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002526:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800253a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800253e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800254a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0b0      	beq.n	80024cc <HAL_RCC_OscConfig+0x1ac>
 800256a:	e058      	b.n	800261e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fe0c 	bl	8001188 <HAL_GetTick>
 8002570:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002576:	f7fe fe07 	bl	8001188 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	@ 0x64
 8002584:	d902      	bls.n	800258c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	f000 bee7 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 800258c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002590:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80025a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80025ac:	d802      	bhi.n	80025b4 <HAL_RCC_OscConfig+0x294>
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e015      	b.n	80025e0 <HAL_RCC_OscConfig+0x2c0>
 80025b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80025c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_RCC_OscConfig+0x2f8>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025e4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80025e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80025f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1b0      	bne.n	8002576 <HAL_RCC_OscConfig+0x256>
 8002614:	e003      	b.n	800261e <HAL_RCC_OscConfig+0x2fe>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 816d 	beq.w	800290e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002634:	4bcd      	ldr	r3, [pc, #820]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002640:	4bca      	ldr	r3, [pc, #808]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d16e      	bne.n	800272a <HAL_RCC_OscConfig+0x40a>
 800264c:	4bc7      	ldr	r3, [pc, #796]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002658:	d167      	bne.n	800272a <HAL_RCC_OscConfig+0x40a>
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800266c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b3f      	cmp	r3, #63	@ 0x3f
 8002678:	d802      	bhi.n	8002680 <HAL_RCC_OscConfig+0x360>
 800267a:	4bbc      	ldr	r3, [pc, #752]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x388>
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002698:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80026a4:	4bb1      	ldr	r3, [pc, #708]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80026ae:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80026ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3d0>
 80026da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 be35 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b9e      	ldr	r3, [pc, #632]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	21f8      	movs	r1, #248	@ 0xf8
 8002706:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800270e:	fa91 f1a1 	rbit	r1, r1
 8002712:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002716:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800271a:	fab1 f181 	clz	r1, r1
 800271e:	b2c9      	uxtb	r1, r1
 8002720:	408b      	lsls	r3, r1
 8002722:	4992      	ldr	r1, [pc, #584]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002728:	e0f1      	b.n	800290e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8083 	beq.w	8002842 <HAL_RCC_OscConfig+0x522>
 800273c:	2301      	movs	r3, #1
 800273e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800274e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800275c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	2301      	movs	r3, #1
 8002766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fd0e 	bl	8001188 <HAL_GetTick>
 800276c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe fd09 	bl	8001188 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	f000 bde9 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800279a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a6:	d802      	bhi.n	80027ae <HAL_RCC_OscConfig+0x48e>
 80027a8:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e013      	b.n	80027d6 <HAL_RCC_OscConfig+0x4b6>
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80027c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027d2:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	2202      	movs	r2, #2
 80027d8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80027dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80027e0:	fa92 f2a2 	rbit	r2, r2
 80027e4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80027e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f002 021f 	and.w	r2, r2, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0b4      	beq.n	8002772 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b58      	ldr	r3, [pc, #352]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002814:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	21f8      	movs	r1, #248	@ 0xf8
 800281e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002826:	fa91 f1a1 	rbit	r1, r1
 800282a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800282e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002832:	fab1 f181 	clz	r1, r1
 8002836:	b2c9      	uxtb	r1, r1
 8002838:	408b      	lsls	r3, r1
 800283a:	494c      	ldr	r1, [pc, #304]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e065      	b.n	800290e <HAL_RCC_OscConfig+0x5ee>
 8002842:	2301      	movs	r3, #1
 8002844:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002854:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002862:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	461a      	mov	r2, r3
 800286a:	2300      	movs	r3, #0
 800286c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fc8b 	bl	8001188 <HAL_GetTick>
 8002872:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fc86 	bl	8001188 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d902      	bls.n	800288e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	f000 bd66 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80028a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ac:	d802      	bhi.n	80028b4 <HAL_RCC_OscConfig+0x594>
 80028ae:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e013      	b.n	80028dc <HAL_RCC_OscConfig+0x5bc>
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x64c>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	2202      	movs	r2, #2
 80028de:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80028e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80028e6:	fa92 f2a2 	rbit	r2, r2
 80028ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80028ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f042 0220 	orr.w	r2, r2, #32
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1b4      	bne.n	8002878 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002912:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8119 	beq.w	8002b56 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002928:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8082 	beq.w	8002a3a <HAL_RCC_OscConfig+0x71a>
 8002936:	2301      	movs	r3, #1
 8002938:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002948:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x650>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fc12 	bl	8001188 <HAL_GetTick>
 8002964:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002968:	e00f      	b.n	800298a <HAL_RCC_OscConfig+0x66a>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fc08 	bl	8001188 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f000 bce8 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4bb0      	ldr	r3, [pc, #704]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 80029ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029f6:	2102      	movs	r1, #2
 80029f8:	6019      	str	r1, [r3, #0]
 80029fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f1a3 	rbit	r1, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a10:	6019      	str	r1, [r3, #0]
  return result;
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d09d      	beq.n	8002974 <HAL_RCC_OscConfig+0x654>
 8002a38:	e08d      	b.n	8002b56 <HAL_RCC_OscConfig+0x836>
 8002a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a5c:	601a      	str	r2, [r3, #0]
  return result;
 8002a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a66:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb0 <HAL_RCC_OscConfig+0x990>)
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fb84 	bl	8001188 <HAL_GetTick>
 8002a80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a86:	f7fe fb7f 	bl	8001188 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	f000 bc5f 	b.w	800335a <HAL_RCC_OscConfig+0x103a>
 8002a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ade:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b68      	ldr	r3, [pc, #416]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b14:	2102      	movs	r1, #2
 8002b16:	6019      	str	r1, [r3, #0]
 8002b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f1a3 	rbit	r1, r3
 8002b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b2a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b2e:	6019      	str	r1, [r3, #0]
  return result;
 8002b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d197      	bne.n	8002a86 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 819c 	beq.w	8002ea4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b4e      	ldr	r3, [pc, #312]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a4a      	ldr	r2, [pc, #296]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	61d3      	str	r3, [r2, #28]
 8002b8a:	4b48      	ldr	r3, [pc, #288]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCC_OscConfig+0x994>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11a      	bne.n	8002bee <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb4 <HAL_RCC_OscConfig+0x994>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <HAL_RCC_OscConfig+0x994>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fae0 	bl	8001188 <HAL_GetTick>
 8002bc8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e009      	b.n	8002be2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe fadb 	bl	8001188 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e3bb      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <HAL_RCC_OscConfig+0x994>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ef      	beq.n	8002bce <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x8ec>
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a2a      	ldr	r2, [pc, #168]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	e035      	b.n	8002c78 <HAL_RCC_OscConfig+0x958>
 8002c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x916>
 8002c1c:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e020      	b.n	8002c78 <HAL_RCC_OscConfig+0x958>
 8002c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x940>
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x958>
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <HAL_RCC_OscConfig+0x98c>)
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8085 	beq.w	8002d94 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa7d 	bl	8001188 <HAL_GetTick>
 8002c8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e011      	b.n	8002cb8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fa78 	bl	8001188 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d907      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e356      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	10908120 	.word	0x10908120
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cfe:	601a      	str	r2, [r3, #0]
  return result;
 8002d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d04:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_OscConfig+0xa00>
 8002d1a:	4b98      	ldr	r3, [pc, #608]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	e013      	b.n	8002d48 <HAL_RCC_OscConfig+0xa28>
 8002d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d24:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d28:	2202      	movs	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d30:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d4c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d50:	2102      	movs	r1, #2
 8002d52:	6011      	str	r1, [r2, #0]
 8002d54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	fa92 f1a2 	rbit	r1, r2
 8002d62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d66:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002d6a:	6011      	str	r1, [r2, #0]
  return result;
 8002d6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d70:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d080      	beq.n	8002c94 <HAL_RCC_OscConfig+0x974>
 8002d92:	e07d      	b.n	8002e90 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7fe f9f8 	bl	8001188 <HAL_GetTick>
 8002d98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f9f3 	bl	8001188 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e2d1      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 8002db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dba:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dde:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dfc:	601a      	str	r2, [r3, #0]
  return result;
 8002dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_OscConfig+0xafe>
 8002e18:	4b58      	ldr	r3, [pc, #352]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	e013      	b.n	8002e46 <HAL_RCC_OscConfig+0xb26>
 8002e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e22:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4b4e      	ldr	r3, [pc, #312]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e4a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e4e:	2102      	movs	r1, #2
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e56:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e64:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e6e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d186      	bne.n	8002d9e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e90:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8251 	beq.w	8003358 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	f000 820f 	beq.w	80032e2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f040 8165 	bne.w	80031a0 <HAL_RCC_OscConfig+0xe80>
 8002ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eda:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ede:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002efa:	601a      	str	r2, [r3, #0]
  return result;
 8002efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	461a      	mov	r2, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f934 	bl	8001188 <HAL_GetTick>
 8002f20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	e009      	b.n	8002f3a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe f92f 	bl	8001188 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e20f      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 8002f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f5e:	601a      	str	r2, [r3, #0]
  return result;
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f72:	d805      	bhi.n	8002f80 <HAL_RCC_OscConfig+0xc60>
 8002f74:	4b01      	ldr	r3, [pc, #4]	@ (8002f7c <HAL_RCC_OscConfig+0xc5c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	e02a      	b.n	8002fd0 <HAL_RCC_OscConfig+0xcb0>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f84:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f92:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	fa93 f2a3 	rbit	r2, r3
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002faa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002fae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4bca      	ldr	r3, [pc, #808]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fd4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fd8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fdc:	6011      	str	r1, [r2, #0]
 8002fde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fe2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fa92 f1a2 	rbit	r1, r2
 8002fec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002ff4:	6011      	str	r1, [r2, #0]
  return result;
 8002ff6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ffa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f202 	lsl.w	r2, r1, r2
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d184      	bne.n	8002f26 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301c:	4bb6      	ldr	r3, [pc, #728]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f023 020f 	bic.w	r2, r3, #15
 8003024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003028:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	49b1      	ldr	r1, [pc, #708]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003036:	4bb0      	ldr	r3, [pc, #704]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800303e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003042:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a19      	ldr	r1, [r3, #32]
 800304a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	430b      	orrs	r3, r1
 8003058:	49a7      	ldr	r1, [pc, #668]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
 800305e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003062:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003066:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003070:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003082:	601a      	str	r2, [r3, #0]
  return result;
 8003084:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003088:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800308c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003098:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	461a      	mov	r2, r3
 80030a0:	2301      	movs	r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe f870 	bl	8001188 <HAL_GetTick>
 80030a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe f86b 	bl	8001188 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e14b      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 80030c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fa93 f2a3 	rbit	r2, r3
 80030de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030e6:	601a      	str	r2, [r3, #0]
  return result;
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80030fa:	d802      	bhi.n	8003102 <HAL_RCC_OscConfig+0xde2>
 80030fc:	4b7e      	ldr	r3, [pc, #504]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e027      	b.n	8003152 <HAL_RCC_OscConfig+0xe32>
 8003102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003106:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800310a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003114:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003122:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800312c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003130:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003148:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	4b6a      	ldr	r3, [pc, #424]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003156:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800315a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800315e:	6011      	str	r1, [r2, #0]
 8003160:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003164:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	fa92 f1a2 	rbit	r1, r2
 800316e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003172:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003176:	6011      	str	r1, [r2, #0]
  return result;
 8003178:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800317c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f002 021f 	and.w	r2, r2, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d087      	beq.n	80030ae <HAL_RCC_OscConfig+0xd8e>
 800319e:	e0db      	b.n	8003358 <HAL_RCC_OscConfig+0x1038>
 80031a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031c4:	601a      	str	r2, [r3, #0]
  return result;
 80031c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fd ffcf 	bl	8001188 <HAL_GetTick>
 80031ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	e009      	b.n	8003204 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fd ffca 	bl	8001188 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0aa      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 8003204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003208:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800320c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003216:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003224:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003232:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b3f      	cmp	r3, #63	@ 0x3f
 800323c:	d802      	bhi.n	8003244 <HAL_RCC_OscConfig+0xf24>
 800323e:	4b2e      	ldr	r3, [pc, #184]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	e027      	b.n	8003294 <HAL_RCC_OscConfig+0xf74>
 8003244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003248:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800324c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003256:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003264:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003272:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800328a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_RCC_OscConfig+0xfd8>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003298:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800329c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	fa92 f1a2 	rbit	r1, r2
 80032b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032b4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80032b8:	6011      	str	r1, [r2, #0]
  return result;
 80032ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f042 0220 	orr.w	r2, r2, #32
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f002 021f 	and.w	r2, r2, #31
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d187      	bne.n	80031f0 <HAL_RCC_OscConfig+0xed0>
 80032e0:	e03a      	b.n	8003358 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d104      	bne.n	80032fc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e031      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_RCC_OscConfig+0x1044>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003304:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <HAL_RCC_OscConfig+0x1044>)
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800330c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003310:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	429a      	cmp	r2, r3
 8003322:	d117      	bne.n	8003354 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003324:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003328:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800332c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003338:	429a      	cmp	r2, r3
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800333c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003348:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b09e      	sub	sp, #120	@ 0x78
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e154      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b89      	ldr	r3, [pc, #548]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d910      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b86      	ldr	r3, [pc, #536]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4984      	ldr	r1, [pc, #528]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b82      	ldr	r3, [pc, #520]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e13c      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b7b      	ldr	r3, [pc, #492]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4978      	ldr	r1, [pc, #480]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80cd 	beq.w	8003576 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d137      	bne.n	8003454 <HAL_RCC_ClockConfig+0xec>
 80033e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80033fc:	d802      	bhi.n	8003404 <HAL_RCC_ClockConfig+0x9c>
 80033fe:	4b6b      	ldr	r3, [pc, #428]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00f      	b.n	8003424 <HAL_RCC_ClockConfig+0xbc>
 8003404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	667b      	str	r3, [r7, #100]	@ 0x64
 8003412:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003416:	663b      	str	r3, [r7, #96]	@ 0x60
 8003418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003420:	4b62      	ldr	r3, [pc, #392]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003428:	65ba      	str	r2, [r7, #88]	@ 0x58
 800342a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800342c:	fa92 f2a2 	rbit	r2, r2
 8003430:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003432:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d171      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0ea      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d137      	bne.n	80034cc <HAL_RCC_ClockConfig+0x164>
 800345c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003460:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800346a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b3f      	cmp	r3, #63	@ 0x3f
 8003474:	d802      	bhi.n	800347c <HAL_RCC_ClockConfig+0x114>
 8003476:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e00f      	b.n	800349c <HAL_RCC_ClockConfig+0x134>
 800347c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003480:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
 800348a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800348e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003498:	4b44      	ldr	r3, [pc, #272]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80034aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d135      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0ae      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
 80034cc:	2302      	movs	r3, #2
 80034ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034e2:	d802      	bhi.n	80034ea <HAL_RCC_ClockConfig+0x182>
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e00d      	b.n	8003506 <HAL_RCC_ClockConfig+0x19e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f6:	2302      	movs	r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	2202      	movs	r2, #2
 8003508:	61ba      	str	r2, [r7, #24]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	fa92 f2a2 	rbit	r2, r2
 8003510:	617a      	str	r2, [r7, #20]
  return result;
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	f002 021f 	and.w	r2, r2, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e07a      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	491a      	ldr	r1, [pc, #104]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003546:	f7fd fe1f 	bl	8001188 <HAL_GetTick>
 800354a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fd fe1b 	bl	8001188 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e062      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_ClockConfig+0x244>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 020c 	and.w	r2, r3, #12
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	429a      	cmp	r2, r3
 8003574:	d1eb      	bne.n	800354e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003576:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d215      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003584:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 0207 	bic.w	r2, r3, #7
 800358c:	4906      	ldr	r1, [pc, #24]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <HAL_RCC_ClockConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d006      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_RCC_ClockConfig+0x2c2>
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_RCC_ClockConfig+0x2cc>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	491a      	ldr	r1, [pc, #104]	@ (8003634 <HAL_RCC_ClockConfig+0x2cc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035da:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <HAL_RCC_ClockConfig+0x2cc>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4912      	ldr	r1, [pc, #72]	@ (8003634 <HAL_RCC_ClockConfig+0x2cc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035ee:	f000 f829 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80035f2:	4601      	mov	r1, r0
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <HAL_RCC_ClockConfig+0x2cc>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fc:	22f0      	movs	r2, #240	@ 0xf0
 80035fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	60fa      	str	r2, [r7, #12]
  return result;
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	40d3      	lsrs	r3, r2
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x2d0>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	fa21 f303 	lsr.w	r3, r1, r3
 800361a:	4a08      	ldr	r2, [pc, #32]	@ (800363c <HAL_RCC_ClockConfig+0x2d4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <HAL_RCC_ClockConfig+0x2d8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fd6c 	bl	8001100 <HAL_InitTick>
  
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3778      	adds	r7, #120	@ 0x78
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	080068d8 	.word	0x080068d8
 800363c:	20000008 	.word	0x20000008
 8003640:	2000000c 	.word	0x2000000c

08003644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d002      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x30>
 800366e:	2b08      	cmp	r3, #8
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x36>
 8003672:	e029      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003676:	613b      	str	r3, [r7, #16]
      break;
 8003678:	e029      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0c9b      	lsrs	r3, r3, #18
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003688:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x98>)
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036a0:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e007      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b2:	4a0b      	ldr	r2, [pc, #44]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036ca:	613b      	str	r3, [r7, #16]
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	693b      	ldr	r3, [r7, #16]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	080068f0 	.word	0x080068f0
 80036e8:	08006900 	.word	0x08006900

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000008 	.word	0x20000008

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800370a:	f7ff ffef 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370e:	4601      	mov	r1, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003718:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800371c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	603a      	str	r2, [r7, #0]
  return result;
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	40d3      	lsrs	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	080068e8 	.word	0x080068e8

08003748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800374e:	f7ff ffcd 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003752:	4601      	mov	r1, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800375c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003760:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	fa92 f2a2 	rbit	r2, r2
 8003768:	603a      	str	r2, [r7, #0]
  return result;
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	fab2 f282 	clz	r2, r2
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	40d3      	lsrs	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	@ (8003788 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	080068e8 	.word	0x080068e8

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b092      	sub	sp, #72	@ 0x48
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80d2 	beq.w	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b4d      	ldr	r3, [pc, #308]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10e      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b4a      	ldr	r3, [pc, #296]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
 80037c8:	4b47      	ldr	r3, [pc, #284]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b44      	ldr	r3, [pc, #272]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a40      	ldr	r2, [pc, #256]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fd fcc9 	bl	8001188 <HAL_GetTick>
 80037f6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fd fcc5 	bl	8001188 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	@ 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1d4      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b37      	ldr	r3, [pc, #220]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003818:	4b33      	ldr	r3, [pc, #204]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003820:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8082 	beq.w	800392e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003834:	429a      	cmp	r2, r3
 8003836:	d07a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003838:	4b2b      	ldr	r3, [pc, #172]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003842:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003846:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	461a      	mov	r2, r3
 8003862:	2301      	movs	r3, #1
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800386a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	4b1c      	ldr	r3, [pc, #112]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800388c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d049      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fd fc75 	bl	8001188 <HAL_GetTick>
 800389e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fc71 	bl	8001188 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e17e      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80038b8:	2302      	movs	r3, #2
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c4:	2302      	movs	r3, #2
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	61fb      	str	r3, [r7, #28]
  return result;
 80038d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038e2:	4b01      	ldr	r3, [pc, #4]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	e00d      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	10908100 	.word	0x10908100
 80038f4:	2302      	movs	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	4b9a      	ldr	r3, [pc, #616]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	2202      	movs	r2, #2
 8003906:	613a      	str	r2, [r7, #16]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	fa92 f2a2 	rbit	r2, r2
 800390e:	60fa      	str	r2, [r7, #12]
  return result;
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fab2 f282 	clz	r2, r2
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f002 021f 	and.w	r2, r2, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0b9      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800392e:	4b8f      	ldr	r3, [pc, #572]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	498c      	ldr	r1, [pc, #560]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003940:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a87      	ldr	r2, [pc, #540]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003960:	4b82      	ldr	r3, [pc, #520]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	f023 0203 	bic.w	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	497f      	ldr	r1, [pc, #508]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4978      	ldr	r1, [pc, #480]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800399c:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4970      	ldr	r1, [pc, #448]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ba:	4b6c      	ldr	r3, [pc, #432]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	f023 0210 	bic.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4969      	ldr	r1, [pc, #420]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039d8:	4b64      	ldr	r3, [pc, #400]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	4961      	ldr	r1, [pc, #388]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	f023 0220 	bic.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	495a      	ldr	r1, [pc, #360]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a14:	4b55      	ldr	r3, [pc, #340]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	4952      	ldr	r1, [pc, #328]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a32:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	494b      	ldr	r1, [pc, #300]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a50:	4b46      	ldr	r3, [pc, #280]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4943      	ldr	r1, [pc, #268]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	493c      	ldr	r1, [pc, #240]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a8c:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	4934      	ldr	r1, [pc, #208]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003aaa:	4b30      	ldr	r3, [pc, #192]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	492d      	ldr	r1, [pc, #180]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	4925      	ldr	r1, [pc, #148]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	491e      	ldr	r1, [pc, #120]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2e:	490f      	ldr	r1, [pc, #60]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b5e:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	e002      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b72:	4913      	ldr	r1, [pc, #76]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b84:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b90:	490b      	ldr	r1, [pc, #44]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bae:	4904      	ldr	r1, [pc, #16]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3748      	adds	r7, #72	@ 0x48
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000

08003bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e040      	b.n	8003c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd f8dc 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	@ 0x24
 8003bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fe54 	bl	80048b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fc7d 	bl	8004510 <UART_SetConfig>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e01b      	b.n	8003c58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fed3 	bl	80049fc <UART_CheckIdleState>
 8003c56:	4603      	mov	r3, r0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d177      	bne.n	8003d68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_UART_Transmit+0x24>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e070      	b.n	8003d6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2221      	movs	r2, #33	@ 0x21
 8003c94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c96:	f7fd fa77 	bl	8001188 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb4:	d108      	bne.n	8003cc8 <HAL_UART_Transmit+0x68>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	e003      	b.n	8003cd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cd0:	e02f      	b.n	8003d32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 ff35 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03b      	b.n	8003d6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	b292      	uxth	r2, r2
 8003d06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1c9      	bne.n	8003cd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	@ 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 feff 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e005      	b.n	8003d6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b08a      	sub	sp, #40	@ 0x28
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	f040 80b6 	bne.w	8003efa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_UART_Receive+0x28>
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0ae      	b.n	8003efc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2222      	movs	r2, #34	@ 0x22
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db4:	f7fd f9e8 	bl	8001188 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d10e      	bne.n	8003df2 <HAL_UART_Receive+0x80>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_UART_Receive+0x76>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003de2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003de6:	e02d      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	22ff      	movs	r2, #255	@ 0xff
 8003dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003df0:	e028      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <HAL_UART_Receive+0xa4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <HAL_UART_Receive+0x9a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e0a:	e01b      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	227f      	movs	r2, #127	@ 0x7f
 8003e10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e14:	e016      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e1e:	d10d      	bne.n	8003e3c <HAL_UART_Receive+0xca>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_UART_Receive+0xc0>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	227f      	movs	r2, #127	@ 0x7f
 8003e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e30:	e008      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	223f      	movs	r2, #63	@ 0x3f
 8003e36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e3a:	e003      	b.n	8003e44 <HAL_UART_Receive+0xd2>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e54:	d108      	bne.n	8003e68 <HAL_UART_Receive+0xf6>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e003      	b.n	8003e70 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003e70:	e037      	b.n	8003ee2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fe65 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e033      	b.n	8003efc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	8a7b      	ldrh	r3, [r7, #18]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	3302      	adds	r3, #2
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00d      	b.n	8003ed0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	8a7b      	ldrh	r3, [r7, #18]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1c1      	bne.n	8003e72 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0ba      	sub	sp, #232	@ 0xe8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f32:	4013      	ands	r3, r2
 8003f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d115      	bne.n	8003f6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00f      	beq.n	8003f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 82ab 	beq.w	80044b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
      }
      return;
 8003f6a:	e2a5      	b.n	80044b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8117 	beq.w	80041a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f86:	4b85      	ldr	r3, [pc, #532]	@ (800419c <HAL_UART_IRQHandler+0x298>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 810a 	beq.w	80041a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xbc>
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xec>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	f043 0204 	orr.w	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d011      	beq.n	8004020 <HAL_UART_IRQHandler+0x11c>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2204      	movs	r2, #4
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d017      	beq.n	800405c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	f043 0208 	orr.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d012      	beq.n	800408e <HAL_UART_IRQHandler+0x18a>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800407c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8211 	beq.w	80044bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d005      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04f      	beq.n	8004186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fd9d 	bl	8004c26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d141      	bne.n	800417e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004126:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004152:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <HAL_UART_IRQHandler+0x29c>)
 8004154:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd f993 	bl	8001486 <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d017      	beq.n	8004196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00f      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b4 	bl	80044e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00b      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9b0 	bl	80044e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e007      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9ac 	bl	80044e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004194:	e192      	b.n	80044bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004196:	bf00      	nop
    return;
 8004198:	e190      	b.n	80044bc <HAL_UART_IRQHandler+0x5b8>
 800419a:	bf00      	nop
 800419c:	04000120 	.word	0x04000120
 80041a0:	08004cef 	.word	0x08004cef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 814b 	bne.w	8004444 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8144 	beq.w	8004444 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 813d 	beq.w	8004444 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2210      	movs	r2, #16
 80041d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	f040 80b5 	bne.w	800434c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8164 	beq.w	80044c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004202:	429a      	cmp	r2, r3
 8004204:	f080 815c 	bcs.w	80044c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800420e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b20      	cmp	r3, #32
 800421a:	f000 8086 	beq.w	800432a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004236:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800423a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800424c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004254:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004260:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1da      	bne.n	800421e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3308      	adds	r3, #8
 8004288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800428c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004290:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004294:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800429e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e1      	bne.n	8004268 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e3      	bne.n	80042a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042fa:	f023 0310 	bic.w	r3, r3, #16
 80042fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800430c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800430e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800431a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e4      	bne.n	80042ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004324:	4618      	mov	r0, r3
 8004326:	f7fd f870 	bl	800140a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800433c:	b29b      	uxth	r3, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8d7 	bl	80044f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800434a:	e0b9      	b.n	80044c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004358:	b29b      	uxth	r3, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80ab 	beq.w	80044c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800436e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80a6 	beq.w	80044c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800438c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800439a:	647b      	str	r3, [r7, #68]	@ 0x44
 800439c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e4      	bne.n	8004378 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	623b      	str	r3, [r7, #32]
   return(result);
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60fb      	str	r3, [r7, #12]
   return(result);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	617b      	str	r3, [r7, #20]
   return(result);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e4      	bne.n	80043fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f85b 	bl	80044f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004442:	e03f      	b.n	80044c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <HAL_UART_IRQHandler+0x56a>
 8004450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fc81 	bl	8004d6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800446c:	e02d      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00e      	beq.n	8004498 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01c      	beq.n	80044c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
    }
    return;
 8004496:	e017      	b.n	80044c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_UART_IRQHandler+0x5c6>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fc32 	bl	8004d1a <UART_EndTransmit_IT>
    return;
 80044b6:	e008      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80044b8:	bf00      	nop
 80044ba:	e006      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80044bc:	bf00      	nop
 80044be:	e004      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80044c8:	bf00      	nop
  }

}
 80044ca:	37e8      	adds	r7, #232	@ 0xe8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b92      	ldr	r3, [pc, #584]	@ (8004784 <UART_SetConfig+0x274>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	430b      	orrs	r3, r1
 8004546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a80      	ldr	r2, [pc, #512]	@ (8004788 <UART_SetConfig+0x278>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d120      	bne.n	80045ce <UART_SetConfig+0xbe>
 800458c:	4b7f      	ldr	r3, [pc, #508]	@ (800478c <UART_SetConfig+0x27c>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b03      	cmp	r3, #3
 8004596:	d817      	bhi.n	80045c8 <UART_SetConfig+0xb8>
 8004598:	a201      	add	r2, pc, #4	@ (adr r2, 80045a0 <UART_SetConfig+0x90>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045c3 	.word	0x080045c3
 80045ac:	080045b7 	.word	0x080045b7
 80045b0:	2301      	movs	r3, #1
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e0b5      	b.n	8004722 <UART_SetConfig+0x212>
 80045b6:	2302      	movs	r3, #2
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e0b2      	b.n	8004722 <UART_SetConfig+0x212>
 80045bc:	2304      	movs	r3, #4
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e0af      	b.n	8004722 <UART_SetConfig+0x212>
 80045c2:	2308      	movs	r3, #8
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e0ac      	b.n	8004722 <UART_SetConfig+0x212>
 80045c8:	2310      	movs	r3, #16
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e0a9      	b.n	8004722 <UART_SetConfig+0x212>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004790 <UART_SetConfig+0x280>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d124      	bne.n	8004622 <UART_SetConfig+0x112>
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <UART_SetConfig+0x27c>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045e4:	d011      	beq.n	800460a <UART_SetConfig+0xfa>
 80045e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ea:	d817      	bhi.n	800461c <UART_SetConfig+0x10c>
 80045ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f0:	d011      	beq.n	8004616 <UART_SetConfig+0x106>
 80045f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f6:	d811      	bhi.n	800461c <UART_SetConfig+0x10c>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <UART_SetConfig+0xf4>
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004600:	d006      	beq.n	8004610 <UART_SetConfig+0x100>
 8004602:	e00b      	b.n	800461c <UART_SetConfig+0x10c>
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e08b      	b.n	8004722 <UART_SetConfig+0x212>
 800460a:	2302      	movs	r3, #2
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e088      	b.n	8004722 <UART_SetConfig+0x212>
 8004610:	2304      	movs	r3, #4
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e085      	b.n	8004722 <UART_SetConfig+0x212>
 8004616:	2308      	movs	r3, #8
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e082      	b.n	8004722 <UART_SetConfig+0x212>
 800461c:	2310      	movs	r3, #16
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e07f      	b.n	8004722 <UART_SetConfig+0x212>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5b      	ldr	r2, [pc, #364]	@ (8004794 <UART_SetConfig+0x284>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d124      	bne.n	8004676 <UART_SetConfig+0x166>
 800462c:	4b57      	ldr	r3, [pc, #348]	@ (800478c <UART_SetConfig+0x27c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004634:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004638:	d011      	beq.n	800465e <UART_SetConfig+0x14e>
 800463a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800463e:	d817      	bhi.n	8004670 <UART_SetConfig+0x160>
 8004640:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004644:	d011      	beq.n	800466a <UART_SetConfig+0x15a>
 8004646:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800464a:	d811      	bhi.n	8004670 <UART_SetConfig+0x160>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0x148>
 8004650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004654:	d006      	beq.n	8004664 <UART_SetConfig+0x154>
 8004656:	e00b      	b.n	8004670 <UART_SetConfig+0x160>
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e061      	b.n	8004722 <UART_SetConfig+0x212>
 800465e:	2302      	movs	r3, #2
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e05e      	b.n	8004722 <UART_SetConfig+0x212>
 8004664:	2304      	movs	r3, #4
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e05b      	b.n	8004722 <UART_SetConfig+0x212>
 800466a:	2308      	movs	r3, #8
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e058      	b.n	8004722 <UART_SetConfig+0x212>
 8004670:	2310      	movs	r3, #16
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e055      	b.n	8004722 <UART_SetConfig+0x212>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a47      	ldr	r2, [pc, #284]	@ (8004798 <UART_SetConfig+0x288>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d124      	bne.n	80046ca <UART_SetConfig+0x1ba>
 8004680:	4b42      	ldr	r3, [pc, #264]	@ (800478c <UART_SetConfig+0x27c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004688:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800468c:	d011      	beq.n	80046b2 <UART_SetConfig+0x1a2>
 800468e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0x1b4>
 8004694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004698:	d011      	beq.n	80046be <UART_SetConfig+0x1ae>
 800469a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800469e:	d811      	bhi.n	80046c4 <UART_SetConfig+0x1b4>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x19c>
 80046a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a8:	d006      	beq.n	80046b8 <UART_SetConfig+0x1a8>
 80046aa:	e00b      	b.n	80046c4 <UART_SetConfig+0x1b4>
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e037      	b.n	8004722 <UART_SetConfig+0x212>
 80046b2:	2302      	movs	r3, #2
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e034      	b.n	8004722 <UART_SetConfig+0x212>
 80046b8:	2304      	movs	r3, #4
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e031      	b.n	8004722 <UART_SetConfig+0x212>
 80046be:	2308      	movs	r3, #8
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e02e      	b.n	8004722 <UART_SetConfig+0x212>
 80046c4:	2310      	movs	r3, #16
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e02b      	b.n	8004722 <UART_SetConfig+0x212>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a33      	ldr	r2, [pc, #204]	@ (800479c <UART_SetConfig+0x28c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d124      	bne.n	800471e <UART_SetConfig+0x20e>
 80046d4:	4b2d      	ldr	r3, [pc, #180]	@ (800478c <UART_SetConfig+0x27c>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80046dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046e0:	d011      	beq.n	8004706 <UART_SetConfig+0x1f6>
 80046e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046e6:	d817      	bhi.n	8004718 <UART_SetConfig+0x208>
 80046e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046ec:	d011      	beq.n	8004712 <UART_SetConfig+0x202>
 80046ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046f2:	d811      	bhi.n	8004718 <UART_SetConfig+0x208>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <UART_SetConfig+0x1f0>
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fc:	d006      	beq.n	800470c <UART_SetConfig+0x1fc>
 80046fe:	e00b      	b.n	8004718 <UART_SetConfig+0x208>
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x212>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e00a      	b.n	8004722 <UART_SetConfig+0x212>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e007      	b.n	8004722 <UART_SetConfig+0x212>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e004      	b.n	8004722 <UART_SetConfig+0x212>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e001      	b.n	8004722 <UART_SetConfig+0x212>
 800471e:	2310      	movs	r3, #16
 8004720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472a:	d16b      	bne.n	8004804 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800472c:	7ffb      	ldrb	r3, [r7, #31]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d838      	bhi.n	80047a4 <UART_SetConfig+0x294>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x228>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	080047a5 	.word	0x080047a5
 8004748:	08004773 	.word	0x08004773
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080047a5 	.word	0x080047a5
 8004758:	0800477b 	.word	0x0800477b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe ffd2 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004760:	61b8      	str	r0, [r7, #24]
        break;
 8004762:	e024      	b.n	80047ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7fe fff0 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 8004768:	61b8      	str	r0, [r7, #24]
        break;
 800476a:	e020      	b.n	80047ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <UART_SetConfig+0x290>)
 800476e:	61bb      	str	r3, [r7, #24]
        break;
 8004770:	e01d      	b.n	80047ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004772:	f7fe ff67 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8004776:	61b8      	str	r0, [r7, #24]
        break;
 8004778:	e019      	b.n	80047ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477e:	61bb      	str	r3, [r7, #24]
        break;
 8004780:	e015      	b.n	80047ae <UART_SetConfig+0x29e>
 8004782:	bf00      	nop
 8004784:	efff69f3 	.word	0xefff69f3
 8004788:	40013800 	.word	0x40013800
 800478c:	40021000 	.word	0x40021000
 8004790:	40004400 	.word	0x40004400
 8004794:	40004800 	.word	0x40004800
 8004798:	40004c00 	.word	0x40004c00
 800479c:	40005000 	.word	0x40005000
 80047a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77bb      	strb	r3, [r7, #30]
        break;
 80047ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d073      	beq.n	800489c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	005a      	lsls	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	441a      	add	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d916      	bls.n	80047fe <UART_SetConfig+0x2ee>
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d6:	d212      	bcs.n	80047fe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f023 030f 	bic.w	r3, r3, #15
 80047e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	89fa      	ldrh	r2, [r7, #14]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e04e      	b.n	800489c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	77bb      	strb	r3, [r7, #30]
 8004802:	e04b      	b.n	800489c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	2b08      	cmp	r3, #8
 8004808:	d827      	bhi.n	800485a <UART_SetConfig+0x34a>
 800480a:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <UART_SetConfig+0x300>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004845 	.word	0x08004845
 800481c:	0800485b 	.word	0x0800485b
 8004820:	0800484b 	.word	0x0800484b
 8004824:	0800485b 	.word	0x0800485b
 8004828:	0800485b 	.word	0x0800485b
 800482c:	0800485b 	.word	0x0800485b
 8004830:	08004853 	.word	0x08004853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7fe ff66 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004838:	61b8      	str	r0, [r7, #24]
        break;
 800483a:	e013      	b.n	8004864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7fe ff84 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 8004840:	61b8      	str	r0, [r7, #24]
        break;
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004844:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <UART_SetConfig+0x3a4>)
 8004846:	61bb      	str	r3, [r7, #24]
        break;
 8004848:	e00c      	b.n	8004864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484a:	f7fe fefb 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 800484e:	61b8      	str	r0, [r7, #24]
        break;
 8004850:	e008      	b.n	8004864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004856:	61bb      	str	r3, [r7, #24]
        break;
 8004858:	e004      	b.n	8004864 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	77bb      	strb	r3, [r7, #30]
        break;
 8004862:	bf00      	nop
    }

    if (pclk != 0U)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	085a      	lsrs	r2, r3, #1
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	441a      	add	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d909      	bls.n	8004898 <UART_SetConfig+0x388>
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488a:	d205      	bcs.n	8004898 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	e001      	b.n	800489c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	007a1200 	.word	0x007a1200

080048b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b6:	d10a      	bne.n	80049ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b098      	sub	sp, #96	@ 0x60
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a0c:	f7fc fbbc 	bl	8001188 <HAL_GetTick>
 8004a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d12e      	bne.n	8004a7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f88c 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e062      	b.n	8004b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d149      	bne.n	8004b20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f856 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d03c      	beq.n	8004b20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3308      	adds	r3, #8
 8004ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af8:	61fa      	str	r2, [r7, #28]
 8004afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	617b      	str	r3, [r7, #20]
   return(result);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e011      	b.n	8004b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3758      	adds	r7, #88	@ 0x58
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5c:	e04f      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b64:	d04b      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fc fb0f 	bl	8001188 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e04e      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d037      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b80      	cmp	r3, #128	@ 0x80
 8004b92:	d034      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b40      	cmp	r3, #64	@ 0x40
 8004b98:	d031      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d110      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2208      	movs	r2, #8
 8004bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f838 	bl	8004c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e029      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd8:	d111      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f81e 	bl	8004c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00f      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0a0      	beq.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b095      	sub	sp, #84	@ 0x54
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d118      	bne.n	8004cce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ce2:	bf00      	nop
 8004ce4:	3754      	adds	r7, #84	@ 0x54
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fbe9 	bl	80044e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e6      	bne.n	8004d22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fbb5 	bl	80044d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <std>:
 8004d84:	2300      	movs	r3, #0
 8004d86:	b510      	push	{r4, lr}
 8004d88:	4604      	mov	r4, r0
 8004d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d92:	6083      	str	r3, [r0, #8]
 8004d94:	8181      	strh	r1, [r0, #12]
 8004d96:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d98:	81c2      	strh	r2, [r0, #14]
 8004d9a:	6183      	str	r3, [r0, #24]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	2208      	movs	r2, #8
 8004da0:	305c      	adds	r0, #92	@ 0x5c
 8004da2:	f000 fa1b 	bl	80051dc <memset>
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <std+0x58>)
 8004da8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <std+0x5c>)
 8004dac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <std+0x60>)
 8004db0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <std+0x64>)
 8004db4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <std+0x68>)
 8004db8:	6224      	str	r4, [r4, #32]
 8004dba:	429c      	cmp	r4, r3
 8004dbc:	d006      	beq.n	8004dcc <std+0x48>
 8004dbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dc2:	4294      	cmp	r4, r2
 8004dc4:	d002      	beq.n	8004dcc <std+0x48>
 8004dc6:	33d0      	adds	r3, #208	@ 0xd0
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	d105      	bne.n	8004dd8 <std+0x54>
 8004dcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd4:	f000 ba7a 	b.w	80052cc <__retarget_lock_init_recursive>
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	bf00      	nop
 8004ddc:	0800502d 	.word	0x0800502d
 8004de0:	0800504f 	.word	0x0800504f
 8004de4:	08005087 	.word	0x08005087
 8004de8:	080050ab 	.word	0x080050ab
 8004dec:	20000644 	.word	0x20000644

08004df0 <stdio_exit_handler>:
 8004df0:	4a02      	ldr	r2, [pc, #8]	@ (8004dfc <stdio_exit_handler+0xc>)
 8004df2:	4903      	ldr	r1, [pc, #12]	@ (8004e00 <stdio_exit_handler+0x10>)
 8004df4:	4803      	ldr	r0, [pc, #12]	@ (8004e04 <stdio_exit_handler+0x14>)
 8004df6:	f000 b869 	b.w	8004ecc <_fwalk_sglue>
 8004dfa:	bf00      	nop
 8004dfc:	20000014 	.word	0x20000014
 8004e00:	08005e19 	.word	0x08005e19
 8004e04:	20000024 	.word	0x20000024

08004e08 <cleanup_stdio>:
 8004e08:	6841      	ldr	r1, [r0, #4]
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <cleanup_stdio+0x34>)
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	4604      	mov	r4, r0
 8004e12:	d001      	beq.n	8004e18 <cleanup_stdio+0x10>
 8004e14:	f001 f800 	bl	8005e18 <_fflush_r>
 8004e18:	68a1      	ldr	r1, [r4, #8]
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <cleanup_stdio+0x38>)
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	d002      	beq.n	8004e26 <cleanup_stdio+0x1e>
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fff9 	bl	8005e18 <_fflush_r>
 8004e26:	68e1      	ldr	r1, [r4, #12]
 8004e28:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <cleanup_stdio+0x3c>)
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d004      	beq.n	8004e38 <cleanup_stdio+0x30>
 8004e2e:	4620      	mov	r0, r4
 8004e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e34:	f000 bff0 	b.w	8005e18 <_fflush_r>
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000644 	.word	0x20000644
 8004e40:	200006ac 	.word	0x200006ac
 8004e44:	20000714 	.word	0x20000714

08004e48 <global_stdio_init.part.0>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <global_stdio_init.part.0+0x30>)
 8004e4c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e7c <global_stdio_init.part.0+0x34>)
 8004e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e80 <global_stdio_init.part.0+0x38>)
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	4620      	mov	r0, r4
 8004e54:	2200      	movs	r2, #0
 8004e56:	2104      	movs	r1, #4
 8004e58:	f7ff ff94 	bl	8004d84 <std>
 8004e5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e60:	2201      	movs	r2, #1
 8004e62:	2109      	movs	r1, #9
 8004e64:	f7ff ff8e 	bl	8004d84 <std>
 8004e68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e72:	2112      	movs	r1, #18
 8004e74:	f7ff bf86 	b.w	8004d84 <std>
 8004e78:	2000077c 	.word	0x2000077c
 8004e7c:	20000644 	.word	0x20000644
 8004e80:	08004df1 	.word	0x08004df1

08004e84 <__sfp_lock_acquire>:
 8004e84:	4801      	ldr	r0, [pc, #4]	@ (8004e8c <__sfp_lock_acquire+0x8>)
 8004e86:	f000 ba22 	b.w	80052ce <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000785 	.word	0x20000785

08004e90 <__sfp_lock_release>:
 8004e90:	4801      	ldr	r0, [pc, #4]	@ (8004e98 <__sfp_lock_release+0x8>)
 8004e92:	f000 ba1d 	b.w	80052d0 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	20000785 	.word	0x20000785

08004e9c <__sinit>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	f7ff fff0 	bl	8004e84 <__sfp_lock_acquire>
 8004ea4:	6a23      	ldr	r3, [r4, #32]
 8004ea6:	b11b      	cbz	r3, 8004eb0 <__sinit+0x14>
 8004ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eac:	f7ff bff0 	b.w	8004e90 <__sfp_lock_release>
 8004eb0:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <__sinit+0x28>)
 8004eb2:	6223      	str	r3, [r4, #32]
 8004eb4:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <__sinit+0x2c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f5      	bne.n	8004ea8 <__sinit+0xc>
 8004ebc:	f7ff ffc4 	bl	8004e48 <global_stdio_init.part.0>
 8004ec0:	e7f2      	b.n	8004ea8 <__sinit+0xc>
 8004ec2:	bf00      	nop
 8004ec4:	08004e09 	.word	0x08004e09
 8004ec8:	2000077c 	.word	0x2000077c

08004ecc <_fwalk_sglue>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	4688      	mov	r8, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004edc:	f1b9 0901 	subs.w	r9, r9, #1
 8004ee0:	d505      	bpl.n	8004eee <_fwalk_sglue+0x22>
 8004ee2:	6824      	ldr	r4, [r4, #0]
 8004ee4:	2c00      	cmp	r4, #0
 8004ee6:	d1f7      	bne.n	8004ed8 <_fwalk_sglue+0xc>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d907      	bls.n	8004f04 <_fwalk_sglue+0x38>
 8004ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d003      	beq.n	8004f04 <_fwalk_sglue+0x38>
 8004efc:	4629      	mov	r1, r5
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	4306      	orrs	r6, r0
 8004f04:	3568      	adds	r5, #104	@ 0x68
 8004f06:	e7e9      	b.n	8004edc <_fwalk_sglue+0x10>

08004f08 <iprintf>:
 8004f08:	b40f      	push	{r0, r1, r2, r3}
 8004f0a:	b507      	push	{r0, r1, r2, lr}
 8004f0c:	4906      	ldr	r1, [pc, #24]	@ (8004f28 <iprintf+0x20>)
 8004f0e:	ab04      	add	r3, sp, #16
 8004f10:	6808      	ldr	r0, [r1, #0]
 8004f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f16:	6881      	ldr	r1, [r0, #8]
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	f000 fc55 	bl	80057c8 <_vfiprintf_r>
 8004f1e:	b003      	add	sp, #12
 8004f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f24:	b004      	add	sp, #16
 8004f26:	4770      	bx	lr
 8004f28:	20000020 	.word	0x20000020

08004f2c <_puts_r>:
 8004f2c:	6a03      	ldr	r3, [r0, #32]
 8004f2e:	b570      	push	{r4, r5, r6, lr}
 8004f30:	6884      	ldr	r4, [r0, #8]
 8004f32:	4605      	mov	r5, r0
 8004f34:	460e      	mov	r6, r1
 8004f36:	b90b      	cbnz	r3, 8004f3c <_puts_r+0x10>
 8004f38:	f7ff ffb0 	bl	8004e9c <__sinit>
 8004f3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f3e:	07db      	lsls	r3, r3, #31
 8004f40:	d405      	bmi.n	8004f4e <_puts_r+0x22>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	0598      	lsls	r0, r3, #22
 8004f46:	d402      	bmi.n	8004f4e <_puts_r+0x22>
 8004f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f4a:	f000 f9c0 	bl	80052ce <__retarget_lock_acquire_recursive>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	0719      	lsls	r1, r3, #28
 8004f52:	d502      	bpl.n	8004f5a <_puts_r+0x2e>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d135      	bne.n	8004fc6 <_puts_r+0x9a>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 f8e7 	bl	8005130 <__swsetup_r>
 8004f62:	b380      	cbz	r0, 8004fc6 <_puts_r+0x9a>
 8004f64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004f68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f6a:	07da      	lsls	r2, r3, #31
 8004f6c:	d405      	bmi.n	8004f7a <_puts_r+0x4e>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	d402      	bmi.n	8004f7a <_puts_r+0x4e>
 8004f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f76:	f000 f9ab 	bl	80052d0 <__retarget_lock_release_recursive>
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da04      	bge.n	8004f8c <_puts_r+0x60>
 8004f82:	69a2      	ldr	r2, [r4, #24]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	dc17      	bgt.n	8004fb8 <_puts_r+0x8c>
 8004f88:	290a      	cmp	r1, #10
 8004f8a:	d015      	beq.n	8004fb8 <_puts_r+0x8c>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	7019      	strb	r1, [r3, #0]
 8004f94:	68a3      	ldr	r3, [r4, #8]
 8004f96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	60a3      	str	r3, [r4, #8]
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d1ed      	bne.n	8004f7e <_puts_r+0x52>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da11      	bge.n	8004fca <_puts_r+0x9e>
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	210a      	movs	r1, #10
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 f881 	bl	80050b2 <__swbuf_r>
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d0d7      	beq.n	8004f64 <_puts_r+0x38>
 8004fb4:	250a      	movs	r5, #10
 8004fb6:	e7d7      	b.n	8004f68 <_puts_r+0x3c>
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f879 	bl	80050b2 <__swbuf_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d1e7      	bne.n	8004f94 <_puts_r+0x68>
 8004fc4:	e7ce      	b.n	8004f64 <_puts_r+0x38>
 8004fc6:	3e01      	subs	r6, #1
 8004fc8:	e7e4      	b.n	8004f94 <_puts_r+0x68>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	220a      	movs	r2, #10
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e7ee      	b.n	8004fb4 <_puts_r+0x88>
	...

08004fd8 <puts>:
 8004fd8:	4b02      	ldr	r3, [pc, #8]	@ (8004fe4 <puts+0xc>)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f7ff bfa5 	b.w	8004f2c <_puts_r>
 8004fe2:	bf00      	nop
 8004fe4:	20000020 	.word	0x20000020

08004fe8 <siprintf>:
 8004fe8:	b40e      	push	{r1, r2, r3}
 8004fea:	b510      	push	{r4, lr}
 8004fec:	b09d      	sub	sp, #116	@ 0x74
 8004fee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004ff0:	9002      	str	r0, [sp, #8]
 8004ff2:	9006      	str	r0, [sp, #24]
 8004ff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ff8:	480a      	ldr	r0, [pc, #40]	@ (8005024 <siprintf+0x3c>)
 8004ffa:	9107      	str	r1, [sp, #28]
 8004ffc:	9104      	str	r1, [sp, #16]
 8004ffe:	490a      	ldr	r1, [pc, #40]	@ (8005028 <siprintf+0x40>)
 8005000:	f853 2b04 	ldr.w	r2, [r3], #4
 8005004:	9105      	str	r1, [sp, #20]
 8005006:	2400      	movs	r4, #0
 8005008:	a902      	add	r1, sp, #8
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005010:	f000 fab4 	bl	800557c <_svfiprintf_r>
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	701c      	strb	r4, [r3, #0]
 8005018:	b01d      	add	sp, #116	@ 0x74
 800501a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501e:	b003      	add	sp, #12
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000020 	.word	0x20000020
 8005028:	ffff0208 	.word	0xffff0208

0800502c <__sread>:
 800502c:	b510      	push	{r4, lr}
 800502e:	460c      	mov	r4, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 f8fc 	bl	8005230 <_read_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	bfab      	itete	ge
 800503c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800503e:	89a3      	ldrhlt	r3, [r4, #12]
 8005040:	181b      	addge	r3, r3, r0
 8005042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005046:	bfac      	ite	ge
 8005048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800504a:	81a3      	strhlt	r3, [r4, #12]
 800504c:	bd10      	pop	{r4, pc}

0800504e <__swrite>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	461f      	mov	r7, r3
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	05db      	lsls	r3, r3, #23
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4616      	mov	r6, r2
 800505e:	d505      	bpl.n	800506c <__swrite+0x1e>
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	2302      	movs	r3, #2
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f8d0 	bl	800520c <_lseek_r>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	4632      	mov	r2, r6
 800507a:	463b      	mov	r3, r7
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	f000 b8e7 	b.w	8005254 <_write_r>

08005086 <__sseek>:
 8005086:	b510      	push	{r4, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 f8bd 	bl	800520c <_lseek_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	bf15      	itete	ne
 8005098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800509a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800509e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050a2:	81a3      	strheq	r3, [r4, #12]
 80050a4:	bf18      	it	ne
 80050a6:	81a3      	strhne	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__sclose>:
 80050aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ae:	f000 b89d 	b.w	80051ec <_close_r>

080050b2 <__swbuf_r>:
 80050b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b4:	460e      	mov	r6, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	4605      	mov	r5, r0
 80050ba:	b118      	cbz	r0, 80050c4 <__swbuf_r+0x12>
 80050bc:	6a03      	ldr	r3, [r0, #32]
 80050be:	b90b      	cbnz	r3, 80050c4 <__swbuf_r+0x12>
 80050c0:	f7ff feec 	bl	8004e9c <__sinit>
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	60a3      	str	r3, [r4, #8]
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	071a      	lsls	r2, r3, #28
 80050cc:	d501      	bpl.n	80050d2 <__swbuf_r+0x20>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	b943      	cbnz	r3, 80050e4 <__swbuf_r+0x32>
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 f82b 	bl	8005130 <__swsetup_r>
 80050da:	b118      	cbz	r0, 80050e4 <__swbuf_r+0x32>
 80050dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80050e0:	4638      	mov	r0, r7
 80050e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	6922      	ldr	r2, [r4, #16]
 80050e8:	1a98      	subs	r0, r3, r2
 80050ea:	6963      	ldr	r3, [r4, #20]
 80050ec:	b2f6      	uxtb	r6, r6
 80050ee:	4283      	cmp	r3, r0
 80050f0:	4637      	mov	r7, r6
 80050f2:	dc05      	bgt.n	8005100 <__swbuf_r+0x4e>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fe8e 	bl	8005e18 <_fflush_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d1ed      	bne.n	80050dc <__swbuf_r+0x2a>
 8005100:	68a3      	ldr	r3, [r4, #8]
 8005102:	3b01      	subs	r3, #1
 8005104:	60a3      	str	r3, [r4, #8]
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	701e      	strb	r6, [r3, #0]
 800510e:	6962      	ldr	r2, [r4, #20]
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	429a      	cmp	r2, r3
 8005114:	d004      	beq.n	8005120 <__swbuf_r+0x6e>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	07db      	lsls	r3, r3, #31
 800511a:	d5e1      	bpl.n	80050e0 <__swbuf_r+0x2e>
 800511c:	2e0a      	cmp	r6, #10
 800511e:	d1df      	bne.n	80050e0 <__swbuf_r+0x2e>
 8005120:	4621      	mov	r1, r4
 8005122:	4628      	mov	r0, r5
 8005124:	f000 fe78 	bl	8005e18 <_fflush_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	d0d9      	beq.n	80050e0 <__swbuf_r+0x2e>
 800512c:	e7d6      	b.n	80050dc <__swbuf_r+0x2a>
	...

08005130 <__swsetup_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4b29      	ldr	r3, [pc, #164]	@ (80051d8 <__swsetup_r+0xa8>)
 8005134:	4605      	mov	r5, r0
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	460c      	mov	r4, r1
 800513a:	b118      	cbz	r0, 8005144 <__swsetup_r+0x14>
 800513c:	6a03      	ldr	r3, [r0, #32]
 800513e:	b90b      	cbnz	r3, 8005144 <__swsetup_r+0x14>
 8005140:	f7ff feac 	bl	8004e9c <__sinit>
 8005144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005148:	0719      	lsls	r1, r3, #28
 800514a:	d422      	bmi.n	8005192 <__swsetup_r+0x62>
 800514c:	06da      	lsls	r2, r3, #27
 800514e:	d407      	bmi.n	8005160 <__swsetup_r+0x30>
 8005150:	2209      	movs	r2, #9
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800515e:	e033      	b.n	80051c8 <__swsetup_r+0x98>
 8005160:	0758      	lsls	r0, r3, #29
 8005162:	d512      	bpl.n	800518a <__swsetup_r+0x5a>
 8005164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005166:	b141      	cbz	r1, 800517a <__swsetup_r+0x4a>
 8005168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800516c:	4299      	cmp	r1, r3
 800516e:	d002      	beq.n	8005176 <__swsetup_r+0x46>
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f8af 	bl	80052d4 <_free_r>
 8005176:	2300      	movs	r3, #0
 8005178:	6363      	str	r3, [r4, #52]	@ 0x34
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	2300      	movs	r3, #0
 8005184:	6063      	str	r3, [r4, #4]
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	b94b      	cbnz	r3, 80051aa <__swsetup_r+0x7a>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d003      	beq.n	80051aa <__swsetup_r+0x7a>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 fe85 	bl	8005eb4 <__smakebuf_r>
 80051aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ae:	f013 0201 	ands.w	r2, r3, #1
 80051b2:	d00a      	beq.n	80051ca <__swsetup_r+0x9a>
 80051b4:	2200      	movs	r2, #0
 80051b6:	60a2      	str	r2, [r4, #8]
 80051b8:	6962      	ldr	r2, [r4, #20]
 80051ba:	4252      	negs	r2, r2
 80051bc:	61a2      	str	r2, [r4, #24]
 80051be:	6922      	ldr	r2, [r4, #16]
 80051c0:	b942      	cbnz	r2, 80051d4 <__swsetup_r+0xa4>
 80051c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051c6:	d1c5      	bne.n	8005154 <__swsetup_r+0x24>
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 80051ca:	0799      	lsls	r1, r3, #30
 80051cc:	bf58      	it	pl
 80051ce:	6962      	ldrpl	r2, [r4, #20]
 80051d0:	60a2      	str	r2, [r4, #8]
 80051d2:	e7f4      	b.n	80051be <__swsetup_r+0x8e>
 80051d4:	2000      	movs	r0, #0
 80051d6:	e7f7      	b.n	80051c8 <__swsetup_r+0x98>
 80051d8:	20000020 	.word	0x20000020

080051dc <memset>:
 80051dc:	4402      	add	r2, r0
 80051de:	4603      	mov	r3, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <_close_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	@ (8005208 <_close_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fec5 	bl	8000f86 <_close>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_close_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_close_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000780 	.word	0x20000780

0800520c <_lseek_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	@ (800522c <_lseek_r+0x20>)
 8005210:	4604      	mov	r4, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	602a      	str	r2, [r5, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fb feda 	bl	8000fd4 <_lseek>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_lseek_r+0x1e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_lseek_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20000780 	.word	0x20000780

08005230 <_read_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	@ (8005250 <_read_r+0x20>)
 8005234:	4604      	mov	r4, r0
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	2200      	movs	r2, #0
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fb fe84 	bl	8000f4c <_read>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_read_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_read_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20000780 	.word	0x20000780

08005254 <_write_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d07      	ldr	r5, [pc, #28]	@ (8005274 <_write_r+0x20>)
 8005258:	4604      	mov	r4, r0
 800525a:	4608      	mov	r0, r1
 800525c:	4611      	mov	r1, r2
 800525e:	2200      	movs	r2, #0
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fb fa9c 	bl	80007a0 <_write>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_write_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_write_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000780 	.word	0x20000780

08005278 <__errno>:
 8005278:	4b01      	ldr	r3, [pc, #4]	@ (8005280 <__errno+0x8>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000020 	.word	0x20000020

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4d0d      	ldr	r5, [pc, #52]	@ (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	@ (80052c0 <__libc_init_array+0x3c>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2600      	movs	r6, #0
 8005290:	42a6      	cmp	r6, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4d0b      	ldr	r5, [pc, #44]	@ (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	@ (80052c8 <__libc_init_array+0x44>)
 8005298:	f000 fed8 	bl	800604c <_init>
 800529c:	1b64      	subs	r4, r4, r5
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2600      	movs	r6, #0
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ac:	4798      	blx	r3
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b6:	4798      	blx	r3
 80052b8:	3601      	adds	r6, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	0800694c 	.word	0x0800694c
 80052c0:	0800694c 	.word	0x0800694c
 80052c4:	0800694c 	.word	0x0800694c
 80052c8:	08006950 	.word	0x08006950

080052cc <__retarget_lock_init_recursive>:
 80052cc:	4770      	bx	lr

080052ce <__retarget_lock_acquire_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <__retarget_lock_release_recursive>:
 80052d0:	4770      	bx	lr
	...

080052d4 <_free_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4605      	mov	r5, r0
 80052d8:	2900      	cmp	r1, #0
 80052da:	d041      	beq.n	8005360 <_free_r+0x8c>
 80052dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e0:	1f0c      	subs	r4, r1, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bfb8      	it	lt
 80052e6:	18e4      	addlt	r4, r4, r3
 80052e8:	f000 f8e0 	bl	80054ac <__malloc_lock>
 80052ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005364 <_free_r+0x90>)
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	b933      	cbnz	r3, 8005300 <_free_r+0x2c>
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	6014      	str	r4, [r2, #0]
 80052f6:	4628      	mov	r0, r5
 80052f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052fc:	f000 b8dc 	b.w	80054b8 <__malloc_unlock>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d908      	bls.n	8005316 <_free_r+0x42>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	1821      	adds	r1, r4, r0
 8005308:	428b      	cmp	r3, r1
 800530a:	bf01      	itttt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	1809      	addeq	r1, r1, r0
 8005312:	6021      	streq	r1, [r4, #0]
 8005314:	e7ed      	b.n	80052f2 <_free_r+0x1e>
 8005316:	461a      	mov	r2, r3
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	b10b      	cbz	r3, 8005320 <_free_r+0x4c>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d9fa      	bls.n	8005316 <_free_r+0x42>
 8005320:	6811      	ldr	r1, [r2, #0]
 8005322:	1850      	adds	r0, r2, r1
 8005324:	42a0      	cmp	r0, r4
 8005326:	d10b      	bne.n	8005340 <_free_r+0x6c>
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	4401      	add	r1, r0
 800532c:	1850      	adds	r0, r2, r1
 800532e:	4283      	cmp	r3, r0
 8005330:	6011      	str	r1, [r2, #0]
 8005332:	d1e0      	bne.n	80052f6 <_free_r+0x22>
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	4408      	add	r0, r1
 800533c:	6010      	str	r0, [r2, #0]
 800533e:	e7da      	b.n	80052f6 <_free_r+0x22>
 8005340:	d902      	bls.n	8005348 <_free_r+0x74>
 8005342:	230c      	movs	r3, #12
 8005344:	602b      	str	r3, [r5, #0]
 8005346:	e7d6      	b.n	80052f6 <_free_r+0x22>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	1821      	adds	r1, r4, r0
 800534c:	428b      	cmp	r3, r1
 800534e:	bf04      	itt	eq
 8005350:	6819      	ldreq	r1, [r3, #0]
 8005352:	685b      	ldreq	r3, [r3, #4]
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	bf04      	itt	eq
 8005358:	1809      	addeq	r1, r1, r0
 800535a:	6021      	streq	r1, [r4, #0]
 800535c:	6054      	str	r4, [r2, #4]
 800535e:	e7ca      	b.n	80052f6 <_free_r+0x22>
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	2000078c 	.word	0x2000078c

08005368 <sbrk_aligned>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4e0f      	ldr	r6, [pc, #60]	@ (80053a8 <sbrk_aligned+0x40>)
 800536c:	460c      	mov	r4, r1
 800536e:	6831      	ldr	r1, [r6, #0]
 8005370:	4605      	mov	r5, r0
 8005372:	b911      	cbnz	r1, 800537a <sbrk_aligned+0x12>
 8005374:	f000 fe16 	bl	8005fa4 <_sbrk_r>
 8005378:	6030      	str	r0, [r6, #0]
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fe11 	bl	8005fa4 <_sbrk_r>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d103      	bne.n	800538e <sbrk_aligned+0x26>
 8005386:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800538a:	4620      	mov	r0, r4
 800538c:	bd70      	pop	{r4, r5, r6, pc}
 800538e:	1cc4      	adds	r4, r0, #3
 8005390:	f024 0403 	bic.w	r4, r4, #3
 8005394:	42a0      	cmp	r0, r4
 8005396:	d0f8      	beq.n	800538a <sbrk_aligned+0x22>
 8005398:	1a21      	subs	r1, r4, r0
 800539a:	4628      	mov	r0, r5
 800539c:	f000 fe02 	bl	8005fa4 <_sbrk_r>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d1f2      	bne.n	800538a <sbrk_aligned+0x22>
 80053a4:	e7ef      	b.n	8005386 <sbrk_aligned+0x1e>
 80053a6:	bf00      	nop
 80053a8:	20000788 	.word	0x20000788

080053ac <_malloc_r>:
 80053ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b0:	1ccd      	adds	r5, r1, #3
 80053b2:	f025 0503 	bic.w	r5, r5, #3
 80053b6:	3508      	adds	r5, #8
 80053b8:	2d0c      	cmp	r5, #12
 80053ba:	bf38      	it	cc
 80053bc:	250c      	movcc	r5, #12
 80053be:	2d00      	cmp	r5, #0
 80053c0:	4606      	mov	r6, r0
 80053c2:	db01      	blt.n	80053c8 <_malloc_r+0x1c>
 80053c4:	42a9      	cmp	r1, r5
 80053c6:	d904      	bls.n	80053d2 <_malloc_r+0x26>
 80053c8:	230c      	movs	r3, #12
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	2000      	movs	r0, #0
 80053ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054a8 <_malloc_r+0xfc>
 80053d6:	f000 f869 	bl	80054ac <__malloc_lock>
 80053da:	f8d8 3000 	ldr.w	r3, [r8]
 80053de:	461c      	mov	r4, r3
 80053e0:	bb44      	cbnz	r4, 8005434 <_malloc_r+0x88>
 80053e2:	4629      	mov	r1, r5
 80053e4:	4630      	mov	r0, r6
 80053e6:	f7ff ffbf 	bl	8005368 <sbrk_aligned>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	4604      	mov	r4, r0
 80053ee:	d158      	bne.n	80054a2 <_malloc_r+0xf6>
 80053f0:	f8d8 4000 	ldr.w	r4, [r8]
 80053f4:	4627      	mov	r7, r4
 80053f6:	2f00      	cmp	r7, #0
 80053f8:	d143      	bne.n	8005482 <_malloc_r+0xd6>
 80053fa:	2c00      	cmp	r4, #0
 80053fc:	d04b      	beq.n	8005496 <_malloc_r+0xea>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	4639      	mov	r1, r7
 8005402:	4630      	mov	r0, r6
 8005404:	eb04 0903 	add.w	r9, r4, r3
 8005408:	f000 fdcc 	bl	8005fa4 <_sbrk_r>
 800540c:	4581      	cmp	r9, r0
 800540e:	d142      	bne.n	8005496 <_malloc_r+0xea>
 8005410:	6821      	ldr	r1, [r4, #0]
 8005412:	1a6d      	subs	r5, r5, r1
 8005414:	4629      	mov	r1, r5
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ffa6 	bl	8005368 <sbrk_aligned>
 800541c:	3001      	adds	r0, #1
 800541e:	d03a      	beq.n	8005496 <_malloc_r+0xea>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	442b      	add	r3, r5
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	f8d8 3000 	ldr.w	r3, [r8]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	bb62      	cbnz	r2, 8005488 <_malloc_r+0xdc>
 800542e:	f8c8 7000 	str.w	r7, [r8]
 8005432:	e00f      	b.n	8005454 <_malloc_r+0xa8>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	1b52      	subs	r2, r2, r5
 8005438:	d420      	bmi.n	800547c <_malloc_r+0xd0>
 800543a:	2a0b      	cmp	r2, #11
 800543c:	d917      	bls.n	800546e <_malloc_r+0xc2>
 800543e:	1961      	adds	r1, r4, r5
 8005440:	42a3      	cmp	r3, r4
 8005442:	6025      	str	r5, [r4, #0]
 8005444:	bf18      	it	ne
 8005446:	6059      	strne	r1, [r3, #4]
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	bf08      	it	eq
 800544c:	f8c8 1000 	streq.w	r1, [r8]
 8005450:	5162      	str	r2, [r4, r5]
 8005452:	604b      	str	r3, [r1, #4]
 8005454:	4630      	mov	r0, r6
 8005456:	f000 f82f 	bl	80054b8 <__malloc_unlock>
 800545a:	f104 000b 	add.w	r0, r4, #11
 800545e:	1d23      	adds	r3, r4, #4
 8005460:	f020 0007 	bic.w	r0, r0, #7
 8005464:	1ac2      	subs	r2, r0, r3
 8005466:	bf1c      	itt	ne
 8005468:	1a1b      	subne	r3, r3, r0
 800546a:	50a3      	strne	r3, [r4, r2]
 800546c:	e7af      	b.n	80053ce <_malloc_r+0x22>
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	42a3      	cmp	r3, r4
 8005472:	bf0c      	ite	eq
 8005474:	f8c8 2000 	streq.w	r2, [r8]
 8005478:	605a      	strne	r2, [r3, #4]
 800547a:	e7eb      	b.n	8005454 <_malloc_r+0xa8>
 800547c:	4623      	mov	r3, r4
 800547e:	6864      	ldr	r4, [r4, #4]
 8005480:	e7ae      	b.n	80053e0 <_malloc_r+0x34>
 8005482:	463c      	mov	r4, r7
 8005484:	687f      	ldr	r7, [r7, #4]
 8005486:	e7b6      	b.n	80053f6 <_malloc_r+0x4a>
 8005488:	461a      	mov	r2, r3
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	42a3      	cmp	r3, r4
 800548e:	d1fb      	bne.n	8005488 <_malloc_r+0xdc>
 8005490:	2300      	movs	r3, #0
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	e7de      	b.n	8005454 <_malloc_r+0xa8>
 8005496:	230c      	movs	r3, #12
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f80c 	bl	80054b8 <__malloc_unlock>
 80054a0:	e794      	b.n	80053cc <_malloc_r+0x20>
 80054a2:	6005      	str	r5, [r0, #0]
 80054a4:	e7d6      	b.n	8005454 <_malloc_r+0xa8>
 80054a6:	bf00      	nop
 80054a8:	2000078c 	.word	0x2000078c

080054ac <__malloc_lock>:
 80054ac:	4801      	ldr	r0, [pc, #4]	@ (80054b4 <__malloc_lock+0x8>)
 80054ae:	f7ff bf0e 	b.w	80052ce <__retarget_lock_acquire_recursive>
 80054b2:	bf00      	nop
 80054b4:	20000784 	.word	0x20000784

080054b8 <__malloc_unlock>:
 80054b8:	4801      	ldr	r0, [pc, #4]	@ (80054c0 <__malloc_unlock+0x8>)
 80054ba:	f7ff bf09 	b.w	80052d0 <__retarget_lock_release_recursive>
 80054be:	bf00      	nop
 80054c0:	20000784 	.word	0x20000784

080054c4 <__ssputs_r>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	688e      	ldr	r6, [r1, #8]
 80054ca:	461f      	mov	r7, r3
 80054cc:	42be      	cmp	r6, r7
 80054ce:	680b      	ldr	r3, [r1, #0]
 80054d0:	4682      	mov	sl, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4690      	mov	r8, r2
 80054d6:	d82d      	bhi.n	8005534 <__ssputs_r+0x70>
 80054d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054e0:	d026      	beq.n	8005530 <__ssputs_r+0x6c>
 80054e2:	6965      	ldr	r5, [r4, #20]
 80054e4:	6909      	ldr	r1, [r1, #16]
 80054e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ea:	eba3 0901 	sub.w	r9, r3, r1
 80054ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054f2:	1c7b      	adds	r3, r7, #1
 80054f4:	444b      	add	r3, r9
 80054f6:	106d      	asrs	r5, r5, #1
 80054f8:	429d      	cmp	r5, r3
 80054fa:	bf38      	it	cc
 80054fc:	461d      	movcc	r5, r3
 80054fe:	0553      	lsls	r3, r2, #21
 8005500:	d527      	bpl.n	8005552 <__ssputs_r+0x8e>
 8005502:	4629      	mov	r1, r5
 8005504:	f7ff ff52 	bl	80053ac <_malloc_r>
 8005508:	4606      	mov	r6, r0
 800550a:	b360      	cbz	r0, 8005566 <__ssputs_r+0xa2>
 800550c:	6921      	ldr	r1, [r4, #16]
 800550e:	464a      	mov	r2, r9
 8005510:	f000 fd58 	bl	8005fc4 <memcpy>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800551a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	6126      	str	r6, [r4, #16]
 8005522:	6165      	str	r5, [r4, #20]
 8005524:	444e      	add	r6, r9
 8005526:	eba5 0509 	sub.w	r5, r5, r9
 800552a:	6026      	str	r6, [r4, #0]
 800552c:	60a5      	str	r5, [r4, #8]
 800552e:	463e      	mov	r6, r7
 8005530:	42be      	cmp	r6, r7
 8005532:	d900      	bls.n	8005536 <__ssputs_r+0x72>
 8005534:	463e      	mov	r6, r7
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	4632      	mov	r2, r6
 800553a:	4641      	mov	r1, r8
 800553c:	f000 fcf6 	bl	8005f2c <memmove>
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	1b9b      	subs	r3, r3, r6
 8005544:	60a3      	str	r3, [r4, #8]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	4433      	add	r3, r6
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	2000      	movs	r0, #0
 800554e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005552:	462a      	mov	r2, r5
 8005554:	f000 fd44 	bl	8005fe0 <_realloc_r>
 8005558:	4606      	mov	r6, r0
 800555a:	2800      	cmp	r0, #0
 800555c:	d1e0      	bne.n	8005520 <__ssputs_r+0x5c>
 800555e:	6921      	ldr	r1, [r4, #16]
 8005560:	4650      	mov	r0, sl
 8005562:	f7ff feb7 	bl	80052d4 <_free_r>
 8005566:	230c      	movs	r3, #12
 8005568:	f8ca 3000 	str.w	r3, [sl]
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005578:	e7e9      	b.n	800554e <__ssputs_r+0x8a>
	...

0800557c <_svfiprintf_r>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	4698      	mov	r8, r3
 8005582:	898b      	ldrh	r3, [r1, #12]
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	b09d      	sub	sp, #116	@ 0x74
 8005588:	4607      	mov	r7, r0
 800558a:	460d      	mov	r5, r1
 800558c:	4614      	mov	r4, r2
 800558e:	d510      	bpl.n	80055b2 <_svfiprintf_r+0x36>
 8005590:	690b      	ldr	r3, [r1, #16]
 8005592:	b973      	cbnz	r3, 80055b2 <_svfiprintf_r+0x36>
 8005594:	2140      	movs	r1, #64	@ 0x40
 8005596:	f7ff ff09 	bl	80053ac <_malloc_r>
 800559a:	6028      	str	r0, [r5, #0]
 800559c:	6128      	str	r0, [r5, #16]
 800559e:	b930      	cbnz	r0, 80055ae <_svfiprintf_r+0x32>
 80055a0:	230c      	movs	r3, #12
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055a8:	b01d      	add	sp, #116	@ 0x74
 80055aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ae:	2340      	movs	r3, #64	@ 0x40
 80055b0:	616b      	str	r3, [r5, #20]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b6:	2320      	movs	r3, #32
 80055b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c0:	2330      	movs	r3, #48	@ 0x30
 80055c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005760 <_svfiprintf_r+0x1e4>
 80055c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ca:	f04f 0901 	mov.w	r9, #1
 80055ce:	4623      	mov	r3, r4
 80055d0:	469a      	mov	sl, r3
 80055d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d6:	b10a      	cbz	r2, 80055dc <_svfiprintf_r+0x60>
 80055d8:	2a25      	cmp	r2, #37	@ 0x25
 80055da:	d1f9      	bne.n	80055d0 <_svfiprintf_r+0x54>
 80055dc:	ebba 0b04 	subs.w	fp, sl, r4
 80055e0:	d00b      	beq.n	80055fa <_svfiprintf_r+0x7e>
 80055e2:	465b      	mov	r3, fp
 80055e4:	4622      	mov	r2, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	4638      	mov	r0, r7
 80055ea:	f7ff ff6b 	bl	80054c4 <__ssputs_r>
 80055ee:	3001      	adds	r0, #1
 80055f0:	f000 80a7 	beq.w	8005742 <_svfiprintf_r+0x1c6>
 80055f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055f6:	445a      	add	r2, fp
 80055f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80055fa:	f89a 3000 	ldrb.w	r3, [sl]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 809f 	beq.w	8005742 <_svfiprintf_r+0x1c6>
 8005604:	2300      	movs	r3, #0
 8005606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800560a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800560e:	f10a 0a01 	add.w	sl, sl, #1
 8005612:	9304      	str	r3, [sp, #16]
 8005614:	9307      	str	r3, [sp, #28]
 8005616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800561a:	931a      	str	r3, [sp, #104]	@ 0x68
 800561c:	4654      	mov	r4, sl
 800561e:	2205      	movs	r2, #5
 8005620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005624:	484e      	ldr	r0, [pc, #312]	@ (8005760 <_svfiprintf_r+0x1e4>)
 8005626:	f7fa fddb 	bl	80001e0 <memchr>
 800562a:	9a04      	ldr	r2, [sp, #16]
 800562c:	b9d8      	cbnz	r0, 8005666 <_svfiprintf_r+0xea>
 800562e:	06d0      	lsls	r0, r2, #27
 8005630:	bf44      	itt	mi
 8005632:	2320      	movmi	r3, #32
 8005634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005638:	0711      	lsls	r1, r2, #28
 800563a:	bf44      	itt	mi
 800563c:	232b      	movmi	r3, #43	@ 0x2b
 800563e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005642:	f89a 3000 	ldrb.w	r3, [sl]
 8005646:	2b2a      	cmp	r3, #42	@ 0x2a
 8005648:	d015      	beq.n	8005676 <_svfiprintf_r+0xfa>
 800564a:	9a07      	ldr	r2, [sp, #28]
 800564c:	4654      	mov	r4, sl
 800564e:	2000      	movs	r0, #0
 8005650:	f04f 0c0a 	mov.w	ip, #10
 8005654:	4621      	mov	r1, r4
 8005656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565a:	3b30      	subs	r3, #48	@ 0x30
 800565c:	2b09      	cmp	r3, #9
 800565e:	d94b      	bls.n	80056f8 <_svfiprintf_r+0x17c>
 8005660:	b1b0      	cbz	r0, 8005690 <_svfiprintf_r+0x114>
 8005662:	9207      	str	r2, [sp, #28]
 8005664:	e014      	b.n	8005690 <_svfiprintf_r+0x114>
 8005666:	eba0 0308 	sub.w	r3, r0, r8
 800566a:	fa09 f303 	lsl.w	r3, r9, r3
 800566e:	4313      	orrs	r3, r2
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	46a2      	mov	sl, r4
 8005674:	e7d2      	b.n	800561c <_svfiprintf_r+0xa0>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	1d19      	adds	r1, r3, #4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	9103      	str	r1, [sp, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfbb      	ittet	lt
 8005682:	425b      	neglt	r3, r3
 8005684:	f042 0202 	orrlt.w	r2, r2, #2
 8005688:	9307      	strge	r3, [sp, #28]
 800568a:	9307      	strlt	r3, [sp, #28]
 800568c:	bfb8      	it	lt
 800568e:	9204      	strlt	r2, [sp, #16]
 8005690:	7823      	ldrb	r3, [r4, #0]
 8005692:	2b2e      	cmp	r3, #46	@ 0x2e
 8005694:	d10a      	bne.n	80056ac <_svfiprintf_r+0x130>
 8005696:	7863      	ldrb	r3, [r4, #1]
 8005698:	2b2a      	cmp	r3, #42	@ 0x2a
 800569a:	d132      	bne.n	8005702 <_svfiprintf_r+0x186>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	9203      	str	r2, [sp, #12]
 80056a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056a8:	3402      	adds	r4, #2
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005770 <_svfiprintf_r+0x1f4>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	2203      	movs	r2, #3
 80056b4:	4650      	mov	r0, sl
 80056b6:	f7fa fd93 	bl	80001e0 <memchr>
 80056ba:	b138      	cbz	r0, 80056cc <_svfiprintf_r+0x150>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	eba0 000a 	sub.w	r0, r0, sl
 80056c2:	2240      	movs	r2, #64	@ 0x40
 80056c4:	4082      	lsls	r2, r0
 80056c6:	4313      	orrs	r3, r2
 80056c8:	3401      	adds	r4, #1
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d0:	4824      	ldr	r0, [pc, #144]	@ (8005764 <_svfiprintf_r+0x1e8>)
 80056d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056d6:	2206      	movs	r2, #6
 80056d8:	f7fa fd82 	bl	80001e0 <memchr>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d036      	beq.n	800574e <_svfiprintf_r+0x1d2>
 80056e0:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <_svfiprintf_r+0x1ec>)
 80056e2:	bb1b      	cbnz	r3, 800572c <_svfiprintf_r+0x1b0>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	3307      	adds	r3, #7
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	3308      	adds	r3, #8
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f2:	4433      	add	r3, r6
 80056f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056f6:	e76a      	b.n	80055ce <_svfiprintf_r+0x52>
 80056f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056fc:	460c      	mov	r4, r1
 80056fe:	2001      	movs	r0, #1
 8005700:	e7a8      	b.n	8005654 <_svfiprintf_r+0xd8>
 8005702:	2300      	movs	r3, #0
 8005704:	3401      	adds	r4, #1
 8005706:	9305      	str	r3, [sp, #20]
 8005708:	4619      	mov	r1, r3
 800570a:	f04f 0c0a 	mov.w	ip, #10
 800570e:	4620      	mov	r0, r4
 8005710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005714:	3a30      	subs	r2, #48	@ 0x30
 8005716:	2a09      	cmp	r2, #9
 8005718:	d903      	bls.n	8005722 <_svfiprintf_r+0x1a6>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0c6      	beq.n	80056ac <_svfiprintf_r+0x130>
 800571e:	9105      	str	r1, [sp, #20]
 8005720:	e7c4      	b.n	80056ac <_svfiprintf_r+0x130>
 8005722:	fb0c 2101 	mla	r1, ip, r1, r2
 8005726:	4604      	mov	r4, r0
 8005728:	2301      	movs	r3, #1
 800572a:	e7f0      	b.n	800570e <_svfiprintf_r+0x192>
 800572c:	ab03      	add	r3, sp, #12
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	462a      	mov	r2, r5
 8005732:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <_svfiprintf_r+0x1f0>)
 8005734:	a904      	add	r1, sp, #16
 8005736:	4638      	mov	r0, r7
 8005738:	f3af 8000 	nop.w
 800573c:	1c42      	adds	r2, r0, #1
 800573e:	4606      	mov	r6, r0
 8005740:	d1d6      	bne.n	80056f0 <_svfiprintf_r+0x174>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	065b      	lsls	r3, r3, #25
 8005746:	f53f af2d 	bmi.w	80055a4 <_svfiprintf_r+0x28>
 800574a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800574c:	e72c      	b.n	80055a8 <_svfiprintf_r+0x2c>
 800574e:	ab03      	add	r3, sp, #12
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	462a      	mov	r2, r5
 8005754:	4b05      	ldr	r3, [pc, #20]	@ (800576c <_svfiprintf_r+0x1f0>)
 8005756:	a904      	add	r1, sp, #16
 8005758:	4638      	mov	r0, r7
 800575a:	f000 f9bb 	bl	8005ad4 <_printf_i>
 800575e:	e7ed      	b.n	800573c <_svfiprintf_r+0x1c0>
 8005760:	08006910 	.word	0x08006910
 8005764:	0800691a 	.word	0x0800691a
 8005768:	00000000 	.word	0x00000000
 800576c:	080054c5 	.word	0x080054c5
 8005770:	08006916 	.word	0x08006916

08005774 <__sfputc_r>:
 8005774:	6893      	ldr	r3, [r2, #8]
 8005776:	3b01      	subs	r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	b410      	push	{r4}
 800577c:	6093      	str	r3, [r2, #8]
 800577e:	da08      	bge.n	8005792 <__sfputc_r+0x1e>
 8005780:	6994      	ldr	r4, [r2, #24]
 8005782:	42a3      	cmp	r3, r4
 8005784:	db01      	blt.n	800578a <__sfputc_r+0x16>
 8005786:	290a      	cmp	r1, #10
 8005788:	d103      	bne.n	8005792 <__sfputc_r+0x1e>
 800578a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800578e:	f7ff bc90 	b.w	80050b2 <__swbuf_r>
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	1c58      	adds	r0, r3, #1
 8005796:	6010      	str	r0, [r2, #0]
 8005798:	7019      	strb	r1, [r3, #0]
 800579a:	4608      	mov	r0, r1
 800579c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <__sfputs_r>:
 80057a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a4:	4606      	mov	r6, r0
 80057a6:	460f      	mov	r7, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	18d5      	adds	r5, r2, r3
 80057ac:	42ac      	cmp	r4, r5
 80057ae:	d101      	bne.n	80057b4 <__sfputs_r+0x12>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e007      	b.n	80057c4 <__sfputs_r+0x22>
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	463a      	mov	r2, r7
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ffda 	bl	8005774 <__sfputc_r>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d1f3      	bne.n	80057ac <__sfputs_r+0xa>
 80057c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057c8 <_vfiprintf_r>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	460d      	mov	r5, r1
 80057ce:	b09d      	sub	sp, #116	@ 0x74
 80057d0:	4614      	mov	r4, r2
 80057d2:	4698      	mov	r8, r3
 80057d4:	4606      	mov	r6, r0
 80057d6:	b118      	cbz	r0, 80057e0 <_vfiprintf_r+0x18>
 80057d8:	6a03      	ldr	r3, [r0, #32]
 80057da:	b90b      	cbnz	r3, 80057e0 <_vfiprintf_r+0x18>
 80057dc:	f7ff fb5e 	bl	8004e9c <__sinit>
 80057e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057e2:	07d9      	lsls	r1, r3, #31
 80057e4:	d405      	bmi.n	80057f2 <_vfiprintf_r+0x2a>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	059a      	lsls	r2, r3, #22
 80057ea:	d402      	bmi.n	80057f2 <_vfiprintf_r+0x2a>
 80057ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ee:	f7ff fd6e 	bl	80052ce <__retarget_lock_acquire_recursive>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	d501      	bpl.n	80057fc <_vfiprintf_r+0x34>
 80057f8:	692b      	ldr	r3, [r5, #16]
 80057fa:	b99b      	cbnz	r3, 8005824 <_vfiprintf_r+0x5c>
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff fc96 	bl	8005130 <__swsetup_r>
 8005804:	b170      	cbz	r0, 8005824 <_vfiprintf_r+0x5c>
 8005806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005808:	07dc      	lsls	r4, r3, #31
 800580a:	d504      	bpl.n	8005816 <_vfiprintf_r+0x4e>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005810:	b01d      	add	sp, #116	@ 0x74
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	0598      	lsls	r0, r3, #22
 800581a:	d4f7      	bmi.n	800580c <_vfiprintf_r+0x44>
 800581c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581e:	f7ff fd57 	bl	80052d0 <__retarget_lock_release_recursive>
 8005822:	e7f3      	b.n	800580c <_vfiprintf_r+0x44>
 8005824:	2300      	movs	r3, #0
 8005826:	9309      	str	r3, [sp, #36]	@ 0x24
 8005828:	2320      	movs	r3, #32
 800582a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800582e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005832:	2330      	movs	r3, #48	@ 0x30
 8005834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80059e4 <_vfiprintf_r+0x21c>
 8005838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800583c:	f04f 0901 	mov.w	r9, #1
 8005840:	4623      	mov	r3, r4
 8005842:	469a      	mov	sl, r3
 8005844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005848:	b10a      	cbz	r2, 800584e <_vfiprintf_r+0x86>
 800584a:	2a25      	cmp	r2, #37	@ 0x25
 800584c:	d1f9      	bne.n	8005842 <_vfiprintf_r+0x7a>
 800584e:	ebba 0b04 	subs.w	fp, sl, r4
 8005852:	d00b      	beq.n	800586c <_vfiprintf_r+0xa4>
 8005854:	465b      	mov	r3, fp
 8005856:	4622      	mov	r2, r4
 8005858:	4629      	mov	r1, r5
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff ffa1 	bl	80057a2 <__sfputs_r>
 8005860:	3001      	adds	r0, #1
 8005862:	f000 80a7 	beq.w	80059b4 <_vfiprintf_r+0x1ec>
 8005866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005868:	445a      	add	r2, fp
 800586a:	9209      	str	r2, [sp, #36]	@ 0x24
 800586c:	f89a 3000 	ldrb.w	r3, [sl]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 809f 	beq.w	80059b4 <_vfiprintf_r+0x1ec>
 8005876:	2300      	movs	r3, #0
 8005878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800587c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005880:	f10a 0a01 	add.w	sl, sl, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	9307      	str	r3, [sp, #28]
 8005888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800588c:	931a      	str	r3, [sp, #104]	@ 0x68
 800588e:	4654      	mov	r4, sl
 8005890:	2205      	movs	r2, #5
 8005892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005896:	4853      	ldr	r0, [pc, #332]	@ (80059e4 <_vfiprintf_r+0x21c>)
 8005898:	f7fa fca2 	bl	80001e0 <memchr>
 800589c:	9a04      	ldr	r2, [sp, #16]
 800589e:	b9d8      	cbnz	r0, 80058d8 <_vfiprintf_r+0x110>
 80058a0:	06d1      	lsls	r1, r2, #27
 80058a2:	bf44      	itt	mi
 80058a4:	2320      	movmi	r3, #32
 80058a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058aa:	0713      	lsls	r3, r2, #28
 80058ac:	bf44      	itt	mi
 80058ae:	232b      	movmi	r3, #43	@ 0x2b
 80058b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b4:	f89a 3000 	ldrb.w	r3, [sl]
 80058b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ba:	d015      	beq.n	80058e8 <_vfiprintf_r+0x120>
 80058bc:	9a07      	ldr	r2, [sp, #28]
 80058be:	4654      	mov	r4, sl
 80058c0:	2000      	movs	r0, #0
 80058c2:	f04f 0c0a 	mov.w	ip, #10
 80058c6:	4621      	mov	r1, r4
 80058c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058cc:	3b30      	subs	r3, #48	@ 0x30
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d94b      	bls.n	800596a <_vfiprintf_r+0x1a2>
 80058d2:	b1b0      	cbz	r0, 8005902 <_vfiprintf_r+0x13a>
 80058d4:	9207      	str	r2, [sp, #28]
 80058d6:	e014      	b.n	8005902 <_vfiprintf_r+0x13a>
 80058d8:	eba0 0308 	sub.w	r3, r0, r8
 80058dc:	fa09 f303 	lsl.w	r3, r9, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	9304      	str	r3, [sp, #16]
 80058e4:	46a2      	mov	sl, r4
 80058e6:	e7d2      	b.n	800588e <_vfiprintf_r+0xc6>
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	1d19      	adds	r1, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9103      	str	r1, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfbb      	ittet	lt
 80058f4:	425b      	neglt	r3, r3
 80058f6:	f042 0202 	orrlt.w	r2, r2, #2
 80058fa:	9307      	strge	r3, [sp, #28]
 80058fc:	9307      	strlt	r3, [sp, #28]
 80058fe:	bfb8      	it	lt
 8005900:	9204      	strlt	r2, [sp, #16]
 8005902:	7823      	ldrb	r3, [r4, #0]
 8005904:	2b2e      	cmp	r3, #46	@ 0x2e
 8005906:	d10a      	bne.n	800591e <_vfiprintf_r+0x156>
 8005908:	7863      	ldrb	r3, [r4, #1]
 800590a:	2b2a      	cmp	r3, #42	@ 0x2a
 800590c:	d132      	bne.n	8005974 <_vfiprintf_r+0x1ac>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	1d1a      	adds	r2, r3, #4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	9203      	str	r2, [sp, #12]
 8005916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800591a:	3402      	adds	r4, #2
 800591c:	9305      	str	r3, [sp, #20]
 800591e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059f4 <_vfiprintf_r+0x22c>
 8005922:	7821      	ldrb	r1, [r4, #0]
 8005924:	2203      	movs	r2, #3
 8005926:	4650      	mov	r0, sl
 8005928:	f7fa fc5a 	bl	80001e0 <memchr>
 800592c:	b138      	cbz	r0, 800593e <_vfiprintf_r+0x176>
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	eba0 000a 	sub.w	r0, r0, sl
 8005934:	2240      	movs	r2, #64	@ 0x40
 8005936:	4082      	lsls	r2, r0
 8005938:	4313      	orrs	r3, r2
 800593a:	3401      	adds	r4, #1
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005942:	4829      	ldr	r0, [pc, #164]	@ (80059e8 <_vfiprintf_r+0x220>)
 8005944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005948:	2206      	movs	r2, #6
 800594a:	f7fa fc49 	bl	80001e0 <memchr>
 800594e:	2800      	cmp	r0, #0
 8005950:	d03f      	beq.n	80059d2 <_vfiprintf_r+0x20a>
 8005952:	4b26      	ldr	r3, [pc, #152]	@ (80059ec <_vfiprintf_r+0x224>)
 8005954:	bb1b      	cbnz	r3, 800599e <_vfiprintf_r+0x1d6>
 8005956:	9b03      	ldr	r3, [sp, #12]
 8005958:	3307      	adds	r3, #7
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	3308      	adds	r3, #8
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005964:	443b      	add	r3, r7
 8005966:	9309      	str	r3, [sp, #36]	@ 0x24
 8005968:	e76a      	b.n	8005840 <_vfiprintf_r+0x78>
 800596a:	fb0c 3202 	mla	r2, ip, r2, r3
 800596e:	460c      	mov	r4, r1
 8005970:	2001      	movs	r0, #1
 8005972:	e7a8      	b.n	80058c6 <_vfiprintf_r+0xfe>
 8005974:	2300      	movs	r3, #0
 8005976:	3401      	adds	r4, #1
 8005978:	9305      	str	r3, [sp, #20]
 800597a:	4619      	mov	r1, r3
 800597c:	f04f 0c0a 	mov.w	ip, #10
 8005980:	4620      	mov	r0, r4
 8005982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005986:	3a30      	subs	r2, #48	@ 0x30
 8005988:	2a09      	cmp	r2, #9
 800598a:	d903      	bls.n	8005994 <_vfiprintf_r+0x1cc>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0c6      	beq.n	800591e <_vfiprintf_r+0x156>
 8005990:	9105      	str	r1, [sp, #20]
 8005992:	e7c4      	b.n	800591e <_vfiprintf_r+0x156>
 8005994:	fb0c 2101 	mla	r1, ip, r1, r2
 8005998:	4604      	mov	r4, r0
 800599a:	2301      	movs	r3, #1
 800599c:	e7f0      	b.n	8005980 <_vfiprintf_r+0x1b8>
 800599e:	ab03      	add	r3, sp, #12
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	462a      	mov	r2, r5
 80059a4:	4b12      	ldr	r3, [pc, #72]	@ (80059f0 <_vfiprintf_r+0x228>)
 80059a6:	a904      	add	r1, sp, #16
 80059a8:	4630      	mov	r0, r6
 80059aa:	f3af 8000 	nop.w
 80059ae:	4607      	mov	r7, r0
 80059b0:	1c78      	adds	r0, r7, #1
 80059b2:	d1d6      	bne.n	8005962 <_vfiprintf_r+0x19a>
 80059b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059b6:	07d9      	lsls	r1, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_vfiprintf_r+0x1fe>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	059a      	lsls	r2, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_vfiprintf_r+0x1fe>
 80059c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059c2:	f7ff fc85 	bl	80052d0 <__retarget_lock_release_recursive>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	065b      	lsls	r3, r3, #25
 80059ca:	f53f af1f 	bmi.w	800580c <_vfiprintf_r+0x44>
 80059ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059d0:	e71e      	b.n	8005810 <_vfiprintf_r+0x48>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <_vfiprintf_r+0x228>)
 80059da:	a904      	add	r1, sp, #16
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 f879 	bl	8005ad4 <_printf_i>
 80059e2:	e7e4      	b.n	80059ae <_vfiprintf_r+0x1e6>
 80059e4:	08006910 	.word	0x08006910
 80059e8:	0800691a 	.word	0x0800691a
 80059ec:	00000000 	.word	0x00000000
 80059f0:	080057a3 	.word	0x080057a3
 80059f4:	08006916 	.word	0x08006916

080059f8 <_printf_common>:
 80059f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	4616      	mov	r6, r2
 80059fe:	4698      	mov	r8, r3
 8005a00:	688a      	ldr	r2, [r1, #8]
 8005a02:	690b      	ldr	r3, [r1, #16]
 8005a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bfb8      	it	lt
 8005a0c:	4613      	movlt	r3, r2
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a14:	4607      	mov	r7, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	b10a      	cbz	r2, 8005a1e <_printf_common+0x26>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	0699      	lsls	r1, r3, #26
 8005a22:	bf42      	ittt	mi
 8005a24:	6833      	ldrmi	r3, [r6, #0]
 8005a26:	3302      	addmi	r3, #2
 8005a28:	6033      	strmi	r3, [r6, #0]
 8005a2a:	6825      	ldr	r5, [r4, #0]
 8005a2c:	f015 0506 	ands.w	r5, r5, #6
 8005a30:	d106      	bne.n	8005a40 <_printf_common+0x48>
 8005a32:	f104 0a19 	add.w	sl, r4, #25
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	6832      	ldr	r2, [r6, #0]
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	dc26      	bgt.n	8005a8e <_printf_common+0x96>
 8005a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	3b00      	subs	r3, #0
 8005a48:	bf18      	it	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	0692      	lsls	r2, r2, #26
 8005a4e:	d42b      	bmi.n	8005aa8 <_printf_common+0xb0>
 8005a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a54:	4641      	mov	r1, r8
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c8      	blx	r9
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d01e      	beq.n	8005a9c <_printf_common+0xa4>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	f003 0306 	and.w	r3, r3, #6
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	bf02      	ittt	eq
 8005a6a:	68e5      	ldreq	r5, [r4, #12]
 8005a6c:	6833      	ldreq	r3, [r6, #0]
 8005a6e:	1aed      	subeq	r5, r5, r3
 8005a70:	68a3      	ldr	r3, [r4, #8]
 8005a72:	bf0c      	ite	eq
 8005a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a78:	2500      	movne	r5, #0
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bfc4      	itt	gt
 8005a7e:	1a9b      	subgt	r3, r3, r2
 8005a80:	18ed      	addgt	r5, r5, r3
 8005a82:	2600      	movs	r6, #0
 8005a84:	341a      	adds	r4, #26
 8005a86:	42b5      	cmp	r5, r6
 8005a88:	d11a      	bne.n	8005ac0 <_printf_common+0xc8>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e008      	b.n	8005aa0 <_printf_common+0xa8>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4652      	mov	r2, sl
 8005a92:	4641      	mov	r1, r8
 8005a94:	4638      	mov	r0, r7
 8005a96:	47c8      	blx	r9
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d103      	bne.n	8005aa4 <_printf_common+0xac>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	e7c6      	b.n	8005a36 <_printf_common+0x3e>
 8005aa8:	18e1      	adds	r1, r4, r3
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	2030      	movs	r0, #48	@ 0x30
 8005aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ab2:	4422      	add	r2, r4
 8005ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005abc:	3302      	adds	r3, #2
 8005abe:	e7c7      	b.n	8005a50 <_printf_common+0x58>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c8      	blx	r9
 8005aca:	3001      	adds	r0, #1
 8005acc:	d0e6      	beq.n	8005a9c <_printf_common+0xa4>
 8005ace:	3601      	adds	r6, #1
 8005ad0:	e7d9      	b.n	8005a86 <_printf_common+0x8e>
	...

08005ad4 <_printf_i>:
 8005ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	7e0f      	ldrb	r7, [r1, #24]
 8005ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005adc:	2f78      	cmp	r7, #120	@ 0x78
 8005ade:	4691      	mov	r9, r2
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	469a      	mov	sl, r3
 8005ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aea:	d807      	bhi.n	8005afc <_printf_i+0x28>
 8005aec:	2f62      	cmp	r7, #98	@ 0x62
 8005aee:	d80a      	bhi.n	8005b06 <_printf_i+0x32>
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	f000 80d1 	beq.w	8005c98 <_printf_i+0x1c4>
 8005af6:	2f58      	cmp	r7, #88	@ 0x58
 8005af8:	f000 80b8 	beq.w	8005c6c <_printf_i+0x198>
 8005afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b04:	e03a      	b.n	8005b7c <_printf_i+0xa8>
 8005b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b0a:	2b15      	cmp	r3, #21
 8005b0c:	d8f6      	bhi.n	8005afc <_printf_i+0x28>
 8005b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b14 <_printf_i+0x40>)
 8005b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b14:	08005b6d 	.word	0x08005b6d
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005afd 	.word	0x08005afd
 8005b20:	08005afd 	.word	0x08005afd
 8005b24:	08005afd 	.word	0x08005afd
 8005b28:	08005afd 	.word	0x08005afd
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005afd 	.word	0x08005afd
 8005b34:	08005afd 	.word	0x08005afd
 8005b38:	08005afd 	.word	0x08005afd
 8005b3c:	08005afd 	.word	0x08005afd
 8005b40:	08005c7f 	.word	0x08005c7f
 8005b44:	08005bab 	.word	0x08005bab
 8005b48:	08005c39 	.word	0x08005c39
 8005b4c:	08005afd 	.word	0x08005afd
 8005b50:	08005afd 	.word	0x08005afd
 8005b54:	08005ca1 	.word	0x08005ca1
 8005b58:	08005afd 	.word	0x08005afd
 8005b5c:	08005bab 	.word	0x08005bab
 8005b60:	08005afd 	.word	0x08005afd
 8005b64:	08005afd 	.word	0x08005afd
 8005b68:	08005c41 	.word	0x08005c41
 8005b6c:	6833      	ldr	r3, [r6, #0]
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6032      	str	r2, [r6, #0]
 8005b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e09c      	b.n	8005cba <_printf_i+0x1e6>
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	6031      	str	r1, [r6, #0]
 8005b88:	0606      	lsls	r6, r0, #24
 8005b8a:	d501      	bpl.n	8005b90 <_printf_i+0xbc>
 8005b8c:	681d      	ldr	r5, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <_printf_i+0xc4>
 8005b90:	0645      	lsls	r5, r0, #25
 8005b92:	d5fb      	bpl.n	8005b8c <_printf_i+0xb8>
 8005b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xd0>
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	426d      	negs	r5, r5
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba4:	4858      	ldr	r0, [pc, #352]	@ (8005d08 <_printf_i+0x234>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e011      	b.n	8005bce <_printf_i+0xfa>
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	0608      	lsls	r0, r1, #24
 8005bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb4:	d402      	bmi.n	8005bbc <_printf_i+0xe8>
 8005bb6:	0649      	lsls	r1, r1, #25
 8005bb8:	bf48      	it	mi
 8005bba:	b2ad      	uxthmi	r5, r5
 8005bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bbe:	4852      	ldr	r0, [pc, #328]	@ (8005d08 <_printf_i+0x234>)
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	bf14      	ite	ne
 8005bc4:	230a      	movne	r3, #10
 8005bc6:	2308      	moveq	r3, #8
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bce:	6866      	ldr	r6, [r4, #4]
 8005bd0:	60a6      	str	r6, [r4, #8]
 8005bd2:	2e00      	cmp	r6, #0
 8005bd4:	db05      	blt.n	8005be2 <_printf_i+0x10e>
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	432e      	orrs	r6, r5
 8005bda:	f021 0104 	bic.w	r1, r1, #4
 8005bde:	6021      	str	r1, [r4, #0]
 8005be0:	d04b      	beq.n	8005c7a <_printf_i+0x1a6>
 8005be2:	4616      	mov	r6, r2
 8005be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005be8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bec:	5dc7      	ldrb	r7, [r0, r7]
 8005bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf2:	462f      	mov	r7, r5
 8005bf4:	42bb      	cmp	r3, r7
 8005bf6:	460d      	mov	r5, r1
 8005bf8:	d9f4      	bls.n	8005be4 <_printf_i+0x110>
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d10b      	bne.n	8005c16 <_printf_i+0x142>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	07df      	lsls	r7, r3, #31
 8005c02:	d508      	bpl.n	8005c16 <_printf_i+0x142>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	6861      	ldr	r1, [r4, #4]
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	bfde      	ittt	le
 8005c0c:	2330      	movle	r3, #48	@ 0x30
 8005c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c12:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005c16:	1b92      	subs	r2, r2, r6
 8005c18:	6122      	str	r2, [r4, #16]
 8005c1a:	f8cd a000 	str.w	sl, [sp]
 8005c1e:	464b      	mov	r3, r9
 8005c20:	aa03      	add	r2, sp, #12
 8005c22:	4621      	mov	r1, r4
 8005c24:	4640      	mov	r0, r8
 8005c26:	f7ff fee7 	bl	80059f8 <_printf_common>
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d14a      	bne.n	8005cc4 <_printf_i+0x1f0>
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c32:	b004      	add	sp, #16
 8005c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	f043 0320 	orr.w	r3, r3, #32
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	4832      	ldr	r0, [pc, #200]	@ (8005d0c <_printf_i+0x238>)
 8005c42:	2778      	movs	r7, #120	@ 0x78
 8005c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	061f      	lsls	r7, r3, #24
 8005c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c52:	d402      	bmi.n	8005c5a <_printf_i+0x186>
 8005c54:	065f      	lsls	r7, r3, #25
 8005c56:	bf48      	it	mi
 8005c58:	b2ad      	uxthmi	r5, r5
 8005c5a:	6031      	str	r1, [r6, #0]
 8005c5c:	07d9      	lsls	r1, r3, #31
 8005c5e:	bf44      	itt	mi
 8005c60:	f043 0320 	orrmi.w	r3, r3, #32
 8005c64:	6023      	strmi	r3, [r4, #0]
 8005c66:	b11d      	cbz	r5, 8005c70 <_printf_i+0x19c>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	e7ad      	b.n	8005bc8 <_printf_i+0xf4>
 8005c6c:	4826      	ldr	r0, [pc, #152]	@ (8005d08 <_printf_i+0x234>)
 8005c6e:	e7e9      	b.n	8005c44 <_printf_i+0x170>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	f023 0320 	bic.w	r3, r3, #32
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e7f6      	b.n	8005c68 <_printf_i+0x194>
 8005c7a:	4616      	mov	r6, r2
 8005c7c:	e7bd      	b.n	8005bfa <_printf_i+0x126>
 8005c7e:	6833      	ldr	r3, [r6, #0]
 8005c80:	6825      	ldr	r5, [r4, #0]
 8005c82:	6961      	ldr	r1, [r4, #20]
 8005c84:	1d18      	adds	r0, r3, #4
 8005c86:	6030      	str	r0, [r6, #0]
 8005c88:	062e      	lsls	r6, r5, #24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	d501      	bpl.n	8005c92 <_printf_i+0x1be>
 8005c8e:	6019      	str	r1, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <_printf_i+0x1c4>
 8005c92:	0668      	lsls	r0, r5, #25
 8005c94:	d5fb      	bpl.n	8005c8e <_printf_i+0x1ba>
 8005c96:	8019      	strh	r1, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	e7bc      	b.n	8005c1a <_printf_i+0x146>
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	6032      	str	r2, [r6, #0]
 8005ca6:	681e      	ldr	r6, [r3, #0]
 8005ca8:	6862      	ldr	r2, [r4, #4]
 8005caa:	2100      	movs	r1, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7fa fa97 	bl	80001e0 <memchr>
 8005cb2:	b108      	cbz	r0, 8005cb8 <_printf_i+0x1e4>
 8005cb4:	1b80      	subs	r0, r0, r6
 8005cb6:	6060      	str	r0, [r4, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc2:	e7aa      	b.n	8005c1a <_printf_i+0x146>
 8005cc4:	6923      	ldr	r3, [r4, #16]
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4640      	mov	r0, r8
 8005ccc:	47d0      	blx	sl
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0ad      	beq.n	8005c2e <_printf_i+0x15a>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	079b      	lsls	r3, r3, #30
 8005cd6:	d413      	bmi.n	8005d00 <_printf_i+0x22c>
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	bfb8      	it	lt
 8005ce0:	4618      	movlt	r0, r3
 8005ce2:	e7a6      	b.n	8005c32 <_printf_i+0x15e>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4640      	mov	r0, r8
 8005cec:	47d0      	blx	sl
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d09d      	beq.n	8005c2e <_printf_i+0x15a>
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	1a5b      	subs	r3, r3, r1
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	dcf2      	bgt.n	8005ce4 <_printf_i+0x210>
 8005cfe:	e7eb      	b.n	8005cd8 <_printf_i+0x204>
 8005d00:	2500      	movs	r5, #0
 8005d02:	f104 0619 	add.w	r6, r4, #25
 8005d06:	e7f5      	b.n	8005cf4 <_printf_i+0x220>
 8005d08:	08006921 	.word	0x08006921
 8005d0c:	08006932 	.word	0x08006932

08005d10 <__sflush_r>:
 8005d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	0716      	lsls	r6, r2, #28
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	d454      	bmi.n	8005dca <__sflush_r+0xba>
 8005d20:	684b      	ldr	r3, [r1, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dc02      	bgt.n	8005d2c <__sflush_r+0x1c>
 8005d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dd48      	ble.n	8005dbe <__sflush_r+0xae>
 8005d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	d045      	beq.n	8005dbe <__sflush_r+0xae>
 8005d32:	2300      	movs	r3, #0
 8005d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d38:	682f      	ldr	r7, [r5, #0]
 8005d3a:	6a21      	ldr	r1, [r4, #32]
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	d030      	beq.n	8005da2 <__sflush_r+0x92>
 8005d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	0759      	lsls	r1, r3, #29
 8005d46:	d505      	bpl.n	8005d54 <__sflush_r+0x44>
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d4e:	b10b      	cbz	r3, 8005d54 <__sflush_r+0x44>
 8005d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d58:	6a21      	ldr	r1, [r4, #32]
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b0      	blx	r6
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	d106      	bne.n	8005d72 <__sflush_r+0x62>
 8005d64:	6829      	ldr	r1, [r5, #0]
 8005d66:	291d      	cmp	r1, #29
 8005d68:	d82b      	bhi.n	8005dc2 <__sflush_r+0xb2>
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e14 <__sflush_r+0x104>)
 8005d6c:	40ca      	lsrs	r2, r1
 8005d6e:	07d6      	lsls	r6, r2, #31
 8005d70:	d527      	bpl.n	8005dc2 <__sflush_r+0xb2>
 8005d72:	2200      	movs	r2, #0
 8005d74:	6062      	str	r2, [r4, #4]
 8005d76:	04d9      	lsls	r1, r3, #19
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	6022      	str	r2, [r4, #0]
 8005d7c:	d504      	bpl.n	8005d88 <__sflush_r+0x78>
 8005d7e:	1c42      	adds	r2, r0, #1
 8005d80:	d101      	bne.n	8005d86 <__sflush_r+0x76>
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	b903      	cbnz	r3, 8005d88 <__sflush_r+0x78>
 8005d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8a:	602f      	str	r7, [r5, #0]
 8005d8c:	b1b9      	cbz	r1, 8005dbe <__sflush_r+0xae>
 8005d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d92:	4299      	cmp	r1, r3
 8005d94:	d002      	beq.n	8005d9c <__sflush_r+0x8c>
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7ff fa9c 	bl	80052d4 <_free_r>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005da0:	e00d      	b.n	8005dbe <__sflush_r+0xae>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b0      	blx	r6
 8005da8:	4602      	mov	r2, r0
 8005daa:	1c50      	adds	r0, r2, #1
 8005dac:	d1c9      	bne.n	8005d42 <__sflush_r+0x32>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <__sflush_r+0x32>
 8005db4:	2b1d      	cmp	r3, #29
 8005db6:	d001      	beq.n	8005dbc <__sflush_r+0xac>
 8005db8:	2b16      	cmp	r3, #22
 8005dba:	d11e      	bne.n	8005dfa <__sflush_r+0xea>
 8005dbc:	602f      	str	r7, [r5, #0]
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e022      	b.n	8005e08 <__sflush_r+0xf8>
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc6:	b21b      	sxth	r3, r3
 8005dc8:	e01b      	b.n	8005e02 <__sflush_r+0xf2>
 8005dca:	690f      	ldr	r7, [r1, #16]
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	d0f6      	beq.n	8005dbe <__sflush_r+0xae>
 8005dd0:	0793      	lsls	r3, r2, #30
 8005dd2:	680e      	ldr	r6, [r1, #0]
 8005dd4:	bf08      	it	eq
 8005dd6:	694b      	ldreq	r3, [r1, #20]
 8005dd8:	600f      	str	r7, [r1, #0]
 8005dda:	bf18      	it	ne
 8005ddc:	2300      	movne	r3, #0
 8005dde:	eba6 0807 	sub.w	r8, r6, r7
 8005de2:	608b      	str	r3, [r1, #8]
 8005de4:	f1b8 0f00 	cmp.w	r8, #0
 8005de8:	dde9      	ble.n	8005dbe <__sflush_r+0xae>
 8005dea:	6a21      	ldr	r1, [r4, #32]
 8005dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005dee:	4643      	mov	r3, r8
 8005df0:	463a      	mov	r2, r7
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b0      	blx	r6
 8005df6:	2800      	cmp	r0, #0
 8005df8:	dc08      	bgt.n	8005e0c <__sflush_r+0xfc>
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e0c:	4407      	add	r7, r0
 8005e0e:	eba8 0800 	sub.w	r8, r8, r0
 8005e12:	e7e7      	b.n	8005de4 <__sflush_r+0xd4>
 8005e14:	20400001 	.word	0x20400001

08005e18 <_fflush_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	690b      	ldr	r3, [r1, #16]
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	b913      	cbnz	r3, 8005e28 <_fflush_r+0x10>
 8005e22:	2500      	movs	r5, #0
 8005e24:	4628      	mov	r0, r5
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	b118      	cbz	r0, 8005e32 <_fflush_r+0x1a>
 8005e2a:	6a03      	ldr	r3, [r0, #32]
 8005e2c:	b90b      	cbnz	r3, 8005e32 <_fflush_r+0x1a>
 8005e2e:	f7ff f835 	bl	8004e9c <__sinit>
 8005e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f3      	beq.n	8005e22 <_fflush_r+0xa>
 8005e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e3c:	07d0      	lsls	r0, r2, #31
 8005e3e:	d404      	bmi.n	8005e4a <_fflush_r+0x32>
 8005e40:	0599      	lsls	r1, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_fflush_r+0x32>
 8005e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e46:	f7ff fa42 	bl	80052ce <__retarget_lock_acquire_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	f7ff ff5f 	bl	8005d10 <__sflush_r>
 8005e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e54:	07da      	lsls	r2, r3, #31
 8005e56:	4605      	mov	r5, r0
 8005e58:	d4e4      	bmi.n	8005e24 <_fflush_r+0xc>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d4e1      	bmi.n	8005e24 <_fflush_r+0xc>
 8005e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e62:	f7ff fa35 	bl	80052d0 <__retarget_lock_release_recursive>
 8005e66:	e7dd      	b.n	8005e24 <_fflush_r+0xc>

08005e68 <__swhatbuf_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e70:	2900      	cmp	r1, #0
 8005e72:	b096      	sub	sp, #88	@ 0x58
 8005e74:	4615      	mov	r5, r2
 8005e76:	461e      	mov	r6, r3
 8005e78:	da0d      	bge.n	8005e96 <__swhatbuf_r+0x2e>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e80:	f04f 0100 	mov.w	r1, #0
 8005e84:	bf14      	ite	ne
 8005e86:	2340      	movne	r3, #64	@ 0x40
 8005e88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	6031      	str	r1, [r6, #0]
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	b016      	add	sp, #88	@ 0x58
 8005e94:	bd70      	pop	{r4, r5, r6, pc}
 8005e96:	466a      	mov	r2, sp
 8005e98:	f000 f862 	bl	8005f60 <_fstat_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dbec      	blt.n	8005e7a <__swhatbuf_r+0x12>
 8005ea0:	9901      	ldr	r1, [sp, #4]
 8005ea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005eaa:	4259      	negs	r1, r3
 8005eac:	4159      	adcs	r1, r3
 8005eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb2:	e7eb      	b.n	8005e8c <__swhatbuf_r+0x24>

08005eb4 <__smakebuf_r>:
 8005eb4:	898b      	ldrh	r3, [r1, #12]
 8005eb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb8:	079d      	lsls	r5, r3, #30
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	d507      	bpl.n	8005ed0 <__smakebuf_r+0x1c>
 8005ec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	2301      	movs	r3, #1
 8005eca:	6163      	str	r3, [r4, #20]
 8005ecc:	b003      	add	sp, #12
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed0:	ab01      	add	r3, sp, #4
 8005ed2:	466a      	mov	r2, sp
 8005ed4:	f7ff ffc8 	bl	8005e68 <__swhatbuf_r>
 8005ed8:	9f00      	ldr	r7, [sp, #0]
 8005eda:	4605      	mov	r5, r0
 8005edc:	4639      	mov	r1, r7
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff fa64 	bl	80053ac <_malloc_r>
 8005ee4:	b948      	cbnz	r0, 8005efa <__smakebuf_r+0x46>
 8005ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eea:	059a      	lsls	r2, r3, #22
 8005eec:	d4ee      	bmi.n	8005ecc <__smakebuf_r+0x18>
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	e7e2      	b.n	8005ec0 <__smakebuf_r+0xc>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	6020      	str	r0, [r4, #0]
 8005efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	9b01      	ldr	r3, [sp, #4]
 8005f06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f0a:	b15b      	cbz	r3, 8005f24 <__smakebuf_r+0x70>
 8005f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 f837 	bl	8005f84 <_isatty_r>
 8005f16:	b128      	cbz	r0, 8005f24 <__smakebuf_r+0x70>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	431d      	orrs	r5, r3
 8005f28:	81a5      	strh	r5, [r4, #12]
 8005f2a:	e7cf      	b.n	8005ecc <__smakebuf_r+0x18>

08005f2c <memmove>:
 8005f2c:	4288      	cmp	r0, r1
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	eb01 0402 	add.w	r4, r1, r2
 8005f34:	d902      	bls.n	8005f3c <memmove+0x10>
 8005f36:	4284      	cmp	r4, r0
 8005f38:	4623      	mov	r3, r4
 8005f3a:	d807      	bhi.n	8005f4c <memmove+0x20>
 8005f3c:	1e43      	subs	r3, r0, #1
 8005f3e:	42a1      	cmp	r1, r4
 8005f40:	d008      	beq.n	8005f54 <memmove+0x28>
 8005f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f4a:	e7f8      	b.n	8005f3e <memmove+0x12>
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4601      	mov	r1, r0
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d100      	bne.n	8005f56 <memmove+0x2a>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f5e:	e7f7      	b.n	8005f50 <memmove+0x24>

08005f60 <_fstat_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d07      	ldr	r5, [pc, #28]	@ (8005f80 <_fstat_r+0x20>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	f7fb f816 	bl	8000f9e <_fstat>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d102      	bne.n	8005f7c <_fstat_r+0x1c>
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	b103      	cbz	r3, 8005f7c <_fstat_r+0x1c>
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000780 	.word	0x20000780

08005f84 <_isatty_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	@ (8005fa0 <_isatty_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb f815 	bl	8000fbe <_isatty>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_isatty_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_isatty_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000780 	.word	0x20000780

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	@ (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb f81e 	bl	8000ff0 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000780 	.word	0x20000780

08005fc4 <memcpy>:
 8005fc4:	440a      	add	r2, r1
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005fcc:	d100      	bne.n	8005fd0 <memcpy+0xc>
 8005fce:	4770      	bx	lr
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	d1f9      	bne.n	8005fd2 <memcpy+0xe>
 8005fde:	bd10      	pop	{r4, pc}

08005fe0 <_realloc_r>:
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	460d      	mov	r5, r1
 8005fea:	b921      	cbnz	r1, 8005ff6 <_realloc_r+0x16>
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	f7ff b9db 	b.w	80053ac <_malloc_r>
 8005ff6:	b92a      	cbnz	r2, 8006004 <_realloc_r+0x24>
 8005ff8:	f7ff f96c 	bl	80052d4 <_free_r>
 8005ffc:	4625      	mov	r5, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006004:	f000 f81a 	bl	800603c <_malloc_usable_size_r>
 8006008:	4284      	cmp	r4, r0
 800600a:	4606      	mov	r6, r0
 800600c:	d802      	bhi.n	8006014 <_realloc_r+0x34>
 800600e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006012:	d8f4      	bhi.n	8005ffe <_realloc_r+0x1e>
 8006014:	4621      	mov	r1, r4
 8006016:	4638      	mov	r0, r7
 8006018:	f7ff f9c8 	bl	80053ac <_malloc_r>
 800601c:	4680      	mov	r8, r0
 800601e:	b908      	cbnz	r0, 8006024 <_realloc_r+0x44>
 8006020:	4645      	mov	r5, r8
 8006022:	e7ec      	b.n	8005ffe <_realloc_r+0x1e>
 8006024:	42b4      	cmp	r4, r6
 8006026:	4622      	mov	r2, r4
 8006028:	4629      	mov	r1, r5
 800602a:	bf28      	it	cs
 800602c:	4632      	movcs	r2, r6
 800602e:	f7ff ffc9 	bl	8005fc4 <memcpy>
 8006032:	4629      	mov	r1, r5
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff f94d 	bl	80052d4 <_free_r>
 800603a:	e7f1      	b.n	8006020 <_realloc_r+0x40>

0800603c <_malloc_usable_size_r>:
 800603c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006040:	1f18      	subs	r0, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfbc      	itt	lt
 8006046:	580b      	ldrlt	r3, [r1, r0]
 8006048:	18c0      	addlt	r0, r0, r3
 800604a:	4770      	bx	lr

0800604c <_init>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	bf00      	nop
 8006050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006052:	bc08      	pop	{r3}
 8006054:	469e      	mov	lr, r3
 8006056:	4770      	bx	lr

08006058 <_fini>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr
